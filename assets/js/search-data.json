{
  
    
        "post0": {
            "title": "Boolean Expressions and If Statements",
            "content": "Expression, Assignments, and Condition Statements . All of the Units have video series. We have access to information and content for College Board and Code.org. Below are two sample videos, it is up to you to determine the detail or brevity that you will need according to your experience. . AP Classroom Boolean Expressions | Code.org If and Conditions, less than 2 minutes | . Introduction to Boolean expression . A Boolean expression is a logical statement that can be evaluated to True or False. A Boolean expression may be composed of a combination of the Boolean constants true or false. . // All of the boolean expressions below evaluate to true if (true) { System.out.println(&quot;True code block&quot;); } if (true &amp;&amp; !false) { System.out.println(&quot;True and Not False code block&quot;); } if (true || false) { System.out.println(&quot;True or False code block&quot;); } if ((true &amp;&amp; !false) &amp;&amp; (true || false)) { System.out.println(&quot;Confusing code block&quot;); } if (!((false || !true) || (false &amp;&amp; true))) { System.out.println(&quot;De Morgan&#39;s law in my head of confusing code block&quot;); } // Can any of the above expression be simplified? What would they simplify to? Are any of these expressions useful? . True code block True and Not False code block True or False code block Confusing code block De Morgan&#39;s law of confusing code block . Hacks . Build your own Jupyter Notebook lesson on ifs . Explain if, if-else, and if-elseif-else. | Make a markdown block before you sample code | Comment in code to describe each decision | . Add to lesson switch-case . Create and if-elseif-elseif-elseif-else statement, 5 or more conditions. | Covert the 5 or more decisions to a switch-case-case-case-case-otherwise. | Make a markdown block before each code example | Comment/establish a style of comments for your if-elseif and switch-case code blocks | Finish lesson with De Morgan&#39;s law . Describe De Morgan&#39;s law | Illustrate De Morgan&#39;s law | Show some code running that shows understanding | Resources, it is really time to show you can find resources beyond the Teacher. Code/Code/Coding is everywhere, find something that helps. . Code.org Unitt 4 section 1 to 5 can help with some ideas. | AP Classroom unit 3 has outline for unit | CodeAcademy has some online resources | Personal hacks . If Statements . If statements are, in my opinion, at the core of all conditional statements. Essentially, whatever comes inside if statements only runs if the expression inside the if statement evaluates to be true. Otherwise, the code inside will not run and will move on. . If the programmer wants to create other code to run in a false case, then they have the else statement to use in an if-else statement. Else statements only run if the if statement evalulates to false. . If statements can be chained in succession using the if-elseif-else statement. The if and else components work exactly the same, but the elseif part can be thought of as a combination between the two. Elseif only runs if the if (or another elseif) satement before evalulates to false and the expression inside the elseif evalulates to true. These elseif statements can be stacked over and over again to handle all sorts of different cases. . Taken altogether, these three statements can be used to handle every sort of conditional case imaginable. It may be a bit confusing to have it explained on text, but it&#39;s much easier to just use actual code to demonstrate: . public class ifTest { public static void main(String[] args) { int numberOne = 5; // if statement // Since numberOne (5) is greater than 1, then it evaluates to be true and the print statement below runs if (numberOne &gt; 1) { System.out.println(numberOne + &quot; is greater than 1!&quot;); } // if-else statement // Since numberOne (5) is not greater than 9, then it evalulates to be false and then the else portion runs instead of the if if (numberOne &gt; 9) { System.out.println(numberOne + &quot; is greater than 9!&quot;); } else { System.out.println(numberOne + &quot; is not greater than 9!&quot;); } // if-elseif-else statement // numberOne (5) is not equal to 1, so the else-if runs next. Since numberOne (5) is equal to 5, then the code under else-if runs if (numberOne == 1) { System.out.println(&quot;numberOne is equal to 1!&quot;); } else if (numberOne == 5) { System.out.println(&quot;numberOne is equal to 5!&quot;); } else { System.out.println(&quot;I don&#39;t know what numberOne is!&quot;); } } } ifTest.main(null); . 5 is greater than 1! 5 is not greater than 9! numberOne is equal to 5! . A lot of elseif statements . You can see in the below example how a lot of elseif statements can be chained together for something like an if-elseif-elseif-elseif-elseif-else statement. The example below may be quite long, but there are other things you can do to simplify this: . public class elseifStatements { public static void main(String[] args) { String favoriteColor = &quot;green&quot;; if (favoriteColor.equals(&quot;red&quot;)) { System.out.println(&quot;The favorite color is red!&quot;); } else if (favoriteColor.equals(&quot;orange&quot;)) { System.out.println(&quot;The favorite color is orange!&quot;); } else if (favoriteColor.equals(&quot;yellow&quot;)) { System.out.println(&quot;The favorite color is yellow!&quot;); } else if (favoriteColor.equals(&quot;green&quot;)) { System.out.println(&quot;The favorite color is green!&quot;); } else if (favoriteColor.equals(&quot;blue&quot;)) { System.out.println(&quot;The favorite color is blue!&quot;); } else if (favoriteColor.equals(&quot;purple&quot;)) { System.out.println(&quot;The favorite color is purple!&quot;); } else { System.out.println(&quot;I don&#39;t know what the favorite color is!&quot;); } } } elseifStatements.main(null); . The favorite color is green! . Switch Cases . Switch cases are similar to if statements in that they run certain lines of code when certain conditions are true. However, switch cases only run when a prespecified variable is equal to whatever is given in each of the cases. . Why would I use this? Well, they can be more efficient than writing a ton of elseif statements. . This is also a bit confusing to explain through text, so here&#39;s another example (note how break is used to prevent everything below it from running): . public class switchTest { public static void main(String[] args) { String favoriteColor = &quot;green&quot;; switch (favoriteColor) { case &quot;red&quot;: System.out.println(&quot;The favorite color is red!&quot;); break; case &quot;orange&quot;: System.out.println(&quot;The favorite color is orange!&quot;); break; case &quot;yellow&quot;: System.out.println(&quot;The favorite color is yellow!&quot;); break; case &quot;green&quot;: System.out.println(&quot;The favorite color is green!&quot;); break; case &quot;blue&quot;: System.out.println(&quot;The favorite color is blue!&quot;); break; case &quot;purple&quot;: System.out.println(&quot;The favorite color is purple!&quot;); break; default: System.out.println(&quot;I don&#39;t know what the favorite color is!&quot;); } } } switchTest.main(null); . The favorite color is green! . De Morgan&#39;s Law . De Morgan&#39;s Law is a bit more mathematical in nature, dealing with set theory, so I&#39;ll try my best to describe it here. . De Morgan&#39;s Law basically explains how certain boolean statements can be rewritten as different expressions, yet essentially be the same. More specifically, it states that &quot;The complement of the union of two sets is the same as the intersection of their complements&quot; or &quot;The complement of the intersection of two sets is the same as the union of their complements&quot;. . What the heck does that mean? An easier way to think about it would be like this: . not (A or B) = (not A) and (not B) | not (A and B) = (not A) or (not B) | . In a more formalalized, mathematical way: . . But even with all that text, it&#39;s still pretty confusing, right? So it&#39;s probably best to visualize it using an actual image. This one I found online pretty much summarizes it best: . . The green shaded area is basically what&#39;s being covered in each equality. Both sides cover the same thing. . Finally, let&#39;s go through an example of how this would apply in code. Essentially, we&#39;ll use a few variables to make a whole bunch of complicated boolean statements that actually mean the same exact thing: . public class deMorgansLaw { public static void main(String[] args) { boolean a = false; boolean b = true; // These two statements are exactly equal according to De Morgan&#39;s law // In this case, the only way to yield an output of true would be to have both a and b to be false (change it to check) System.out.println(!(a || b)); System.out.println(!a &amp;&amp; !b); boolean c = true; boolean d = false; // These two statements are also exactly equal according to De Morgan&#39;s Law // In this case, the only way to yield an output of false would be to have both c and d to be true (change it to check) System.out.println(!(c &amp;&amp; d)); System.out.println(!c || !d); } } deMorgansLaw.main(null); . false false true true .",
            "url": "https://horizon-ab.github.io/congenial-tribble/pbl/2022/09/06/booleansandifs.html",
            "relUrl": "/pbl/2022/09/06/booleansandifs.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Trajectory Calculator - Key Code Requirements",
            "content": "Using Math class . TrajectoryCalculator class utilizes the Math class in order to perform operations to find the equation. . More specifically, it uses Math.pow(), Math.cos(), Math.tan(), and Math.PI. . // The line below isn&#39;t necessary in Jupyter Notebook //package com.hacks.trajectoryCalculator; import org.jfree.data.function.Function2D; /* * Actual math for calculating trajectory * * Calculates equation as a string * * Returns equation * */ public class TrajectoryMath implements Function2D { // Initialize variables private double velocity; private double degrees; private double height; private String equation; private double coefficientA; private double coefficientB; private double coefficientC; // Constructor public TrajectoryMath(double velocity, double degrees, double height) { this.velocity = velocity; this.degrees = degrees; this.height = height; this.calculateEquation(); } // Getters and setters public double getVelocity() { return this.velocity; } public double getDegrees() { return this.degrees; } public double getHeight() { return this.height; } public String getEquation() { return this.equation; } public double getCoefficientA() { return this.coefficientA; } public double getCoefficientB() { return this.coefficientB; } public double getCoefficientC() { return this.coefficientC; } // Gets the root of the equation // There should be only one positive root, so the method will return that and discard the other // Returns 0.0 if none is found (which shouldn&#39;t happen usually) public double getRoot() { double rootOne = (-this.coefficientB + Math.sqrt(Math.pow(coefficientB, 2) - 4 * (-this.coefficientC) * this.coefficientA)) / (2 * (-this.coefficientC)); double rootTwo = (-this.coefficientB - Math.sqrt(Math.pow(coefficientB, 2) - 4 * (-this.coefficientC) * this.coefficientA)) / (2 * (-this.coefficientC)); if (rootOne &gt; 0) { return rootOne; } else if (rootTwo &gt; 0) { return rootTwo; } else { return 0.0; } } public void setVelocity(double velocity) { this.velocity = velocity; } public void setDegrees(double degrees) { this.degrees = degrees; } public void setHeight(double height) { this.height = height; } // Array should be in order of velocity, degrees, and height public void setParameters(double[] values) { this.velocity = values[0]; this.degrees = values[1]; this.height = values[2]; } // Math for equation private void calculateEquation() { // Calculates coefficients for each part this.coefficientA = height; this.coefficientB = Math.tan(degrees * Math.PI/180); this.coefficientC = 9.8 / (2 * Math.pow(velocity, 2) * Math.pow(Math.cos(degrees * Math.PI/180), 2)); // Makes string of equation just in case String precheckedEquation = &quot;y = &quot; + String.valueOf(coefficientA) + &quot; + &quot; + String.valueOf(coefficientB) + &quot;x - &quot; + String.valueOf(coefficientC) + &quot;x^2&quot;; this.equation = precheckedEquation; } // Returns equation public double getValue(double v) { return coefficientA + coefficientB * v - coefficientC * Math.pow(v, 2); } /* * public static void main(String[] args) { TrajectoryMath example = new TrajectoryMath(15, 60, 4); System.out.println(example.getRoot()); } */ } . Using GUI . InputInitial creates the prompt for the user to enter inputs. . TrajectoryGraph outputs the graph for the user to visualize. . // Below line is unnecessary //package com.hacks.trajectoryCalculator; import javax.swing.JOptionPane; // library to display options import javax.swing.JTextField; // library to create a text field to render on GUI public class InputInitial { // instance variables to be used public static Double initialVelocity; public static Double initialDegrees; public static Double initialHeight; // create the GUI element that users input into public void spawnInputs() { // while the values have not changed yet, keep going (for error handling) while (initialVelocity == null || initialDegrees == null || initialHeight == null) { // text field initialization JTextField inputVelocity = new JTextField(); JTextField inputDegrees = new JTextField(); JTextField inputHeight = new JTextField(); // organizing the input text to display + the text field in object Object[] inputs = { &quot;Initial Velocity (m/s):&quot;, inputVelocity, &quot;Initial Degrees:&quot;, inputDegrees, &quot;Initial Height (m):&quot;, inputHeight }; JOptionPane.showConfirmDialog(null, inputs, &quot;Input the initial values for your object (numbers only):&quot;, JOptionPane.OK_CANCEL_OPTION); // creates the option menu with the 3 inputs // take the input, assign it to the public variables initialVelocity = parseInput(inputVelocity); initialDegrees = parseInput(inputDegrees); initialHeight = parseInput(inputHeight); } } // change JTextField into Double, also error handling public Double parseInput(JTextField inputValue) { String placeholder = inputValue.getText(); // get the string out of the input // error handling + edge cases try { double initialValue = Double.parseDouble(placeholder); // if negative, cannot be valid so throw error --&gt; reinput values bc still null if (initialValue &lt; 0.0) { JOptionPane.showMessageDialog(null, &quot;Inputs must be greater than 0&quot;, &quot;Invalid Input&quot;, JOptionPane.WARNING_MESSAGE); return null; } else { // if everything ok, return the value return initialValue; } } catch (Exception e) { // if cannot be cased as a double, throw error --&gt; reinput values JOptionPane.showMessageDialog(null, &quot;There was an invalid input for &quot; + placeholder + &quot;, please try again. &quot; + e, &quot;Unwanted Input&quot;, JOptionPane.WARNING_MESSAGE); return null; } } } . // Below line is unnecessary // package com.hacks.trajectoryCalculator; // maven build // import the graphs import org.jfree.data.function.Function2D; import org.jfree.data.general.*; import org.jfree.chart.ChartFactory; import org.jfree.chart.ChartPanel; import org.jfree.chart.JFreeChart; import org.jfree.chart.plot.PlotOrientation; import org.jfree.data.xy.XYDataset; // import the other files import com.hacks.trajectoryCalculator.*; // import swing and awt import javax.swing.JFrame; import java.awt.Dimension; public class TrajectoryGraph extends JFrame { // Constructor of the graph that will be displayed public TrajectoryGraph() { InputInitial newInputs = new InputInitial(); // start input object from separate file newInputs.spawnInputs(); // start the process of collecting user input drawGraph(InputInitial.initialVelocity, InputInitial.initialDegrees, InputInitial.initialHeight); // call method to draw the graph with the user input taken } // graph drawer public void drawGraph(double velocity, double degrees, double height) { Function2D test = new TrajectoryMath(velocity, degrees, height); // TrajectoryMath implements function2d, so use those values create new function2d object TrajectoryMath testGetter = new TrajectoryMath(velocity, degrees, height); // creates TrajectoryMath object from the other file to call custom methods XYDataset dataset = DatasetUtils.sampleFunction2D(test, 0.0, testGetter.getRoot(), 50, &quot;Function&quot;); // generates the dataset of xy values with the function final JFreeChart chart = ChartFactory.createXYLineChart(&quot;Trajectory Equation&quot;, &quot;X Position (meters)&quot;, &quot;Y Position (meters)&quot;, dataset, PlotOrientation.VERTICAL, true, true, false); // creates the actual graph with attributes // initializing the display ChartPanel cp = new ChartPanel(chart) { @Override public Dimension getPreferredSize() { return new Dimension(500, 500); // set initial dimension } }; // allow mouse wheel scrolling cp.setMouseWheelEnabled(true); add(cp); // Finalize the building of the graph setDefaultCloseOperation(EXIT_ON_CLOSE); pack(); } public static void main(String[] args) { // runs the creation of the graph with a queue in a different thread and posts the gui after events are processed java.awt.EventQueue.invokeLater(new Runnable() { @Override public void run() { // initialize new TrajectoryGraph object, setvisible to display the graph new TrajectoryGraph().setVisible(true); } }); } } .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/09/05/trajectorykeycode.html",
            "relUrl": "/2022/09/05/trajectorykeycode.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "The Trajectory Calculator",
            "content": "The Trajectory Calculator . As my teamate (Andrew Meng) and I were wondering what to create for our GUI project, we eventually stumbled into the realm of physics. Originally, we wanted to create a kinematics simulator, but we soon realized how hard that would actually be. Apparently, real time updates take a lot of effort to implement. . Our next idea would be the one we chose - a trajectory calculator. The idea was simple: ask the user for inputs on velocity, angle, and height and the program would output a graph of the trajectory of the object. So, we soon got to work on implementing it. . Bailey’s Part . My part in creating it centered around the fundamental part of the idea - the mathematics. I realized that a class had to be made to handle all of the mathematical operations behind the trajectory, so I created TrajectoryMath.java to take care of all of that. . TrajectoryMath takes in parameters of velocity, degrees, and height to perform all of the calculations. Once the object is created, it’s able to return the equation in double or String format, the positive root (when the equation is equal to 0), and each of the coefficients for the equation. . Without this mathematical framework, the graph wouldn’t be able to output anything useful at all. . Andrew’s Part . Andrew’s part in creating it centered around the GUI portion of the process, making it interactive so that a user could input values and have the program spit out a graph as the output. He created two files, InputInitial.java and TrajectoryGraph.java to handle the inputs and graphing respectively. . InputInitial essentially creates a prompt for the user to input the velocity, degrees, and height for the equation. It also takes care of error handling with faulty inputs. . TrajectoryGraph is probably the central file of the entire operation, as it runs the entire program. It creates an object of the InputInitial class to get the inputs, and takes each of those inputs as parameters for the drawGraph() method. This method creates an object of the TrajectoryMath class to deal with the math and then takes values from that and uses it as inputs to create a graph using JFrame. . Without this interactive structure, the user wouldn’t even be able to input and see anything at all. . Conclusion . This project was a lot bigger than expected, and we ran into quite a few problems along the way. But I found it very fun to create a big project that actually has a cool purpose. I also really felt that I grew a lot during this project, as it was a new experience to deal with multiple Java files and complicated packages. Overall, it was a fun experience. . .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/pbl/2022/09/05/trajectorycalculator.html",
            "relUrl": "/markdown/pbl/2022/09/05/trajectorycalculator.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "AP CSA Log 3 - Arrays",
            "content": "Arrays . Arrays are an important structure to understand, as they appear on the AP Exam as one of the FRQs. But, what exactly are arrays in Java? . Definition . Arrays can store multiples values of a datatype, indicated by the form: . “type[] arrayName;” . Various values can be stored within, making it a useful tool to handle large amounts of data. . For and while loops . Arrays can also be transversed, iterated, and mutated through for and while loops. Using these loops, each element inside the array can be accessed and/or changed somehow. It’s way easier than just using a million variables and going through each one. . To access each value, simply use the square brackets along with the index (which starts from 0). An example of accessing something at index 2 would like like this . “arrayOfNumbers[2];” . Conclusion . Arrays are useful for handling large amounts of data neatly. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/college%20board/2022/09/05/csalog3.html",
            "relUrl": "/markdown/college%20board/2022/09/05/csalog3.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Using Java Objects",
            "content": "Console Based Menu . Java imports allow user input and console output to be displayed in Terminal . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | . Other College Board Topics . A 2D array is used to store COLORS | A Control Structure, Switch, is used to process Menu select to code that performs related action | . Key PBL Topic . Menu class when instantiated with new Menu() takes over Frontend experience with user. This is relevant to Draw Lab in this article and how Spring Boot works in Web programming. Objects are intended to encapsulate Frontend, Backend or experience ... Web Site control flow, Database CRUD operations, or a Menu in terminal (this example) | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 30; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: System.out.println(&quot;Macro monkeys&quot;); default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 1: Hello, World! 2: DefaultRedGreenYellowBluePurpleCyanWhite 3: Loading...############################## 0: Goodbye, World! . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Using Objects . Javax Swing UI (JFrame) | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . Code.org Object Oriented Programming - The Neighborhood . Students learn fundamental Java concepts as they navigate and interact with The Neighborhood with Painter objects and create new types of Painters to expand the capabilities of their programs. . College Board Topics . Inheritance (extends) is introduced early in this activity | Conditional statements, While loops, and Boolean expressions | . Using Objects . Code.org Painter class and objects | . Activity Page Start: Code.org CSA1 . Hacks . College Board and CTE competences. . Documentation / Analysis. Describe with Markdown Cell(s) and triple backtick code fragments that answers to the following from your work... Explain where a Class is defined | Explain where an instances of a Class is defined | Explain where an object is Calling a Method | Explain where an object is Mutating data | Describe Console, GUI differences, or Code.org differences. | . | Exploration work Build a new Console or GUI lab for your own solution of interest, this is great opportunity to visualize data from Math, Physics, or other class using Math library. Look to make these changes in your work Make constructors of different signatures. | Use Wrapper Classes of Integer and Double for defining object instance or static data in the Class | Use the Math Class in performing calculations | . | Code.org learning Follow the Neighborhood lessons and work through the OOP Unit. | . Documentation/Analysis Hacks . Classes are usually defined at the very top of a java program, encapsulating basically everything. . Instances of classes (objects) are defined like so: &quot;Class object = new Class()&quot;, usually in main(). . Objects call methods using the dot operator (&quot;.&quot;), usually in main() as well. . // Class is defined here public class Test { public int number; public String word; public Test(int number, String word) { this.number = number; this.word = word; } public void talk() { System.out.println(this.word); } public static void main(String[] args) { // Class instance is defined here Test objectOne = new Test(17, &quot;Hello&quot;); // Object method is called here objectOne.talk(); // Object is mutating data here objectOne.number = 42; } } Test.main(null); . Hello . Console vs. GUI vs. Code.org . Consoles, GUIs, and Code.org are all places that code can be run, but each are very distinct and have different purposes. . Consoles such as terminal are probably the lowest level place to run code from, and thus they can have the most direct impacts on files in the computer. However, one downside is that everything is pretty much barebones since only ASCII characters can be displayed. Users can still enter inputs and receive outputs, but it&#39;s not very user friendly. Its main purpose is for developers and programmers to have a wider control over the machine they&#39;re using. . GUIs such as the browsers we use (Chrome, Edge, Bing, etc.) can be found in nearly every single device we use. They&#39;re quite user friendly and very clear, making it very convinient to use to perform certain tasks. However, it does come at the downside of being somewhat limited in its functionality. The GUIs have to simplify everything to give the user a good experience, but that also means certain things have to be left out. Its main purpose is to give users an easy experience to perform specific tasks. . Code.org seems to take aspects from both consoles and GUIs in that it requires specific commands to run just like consoles, but it&#39;s also quite user friendly in compiling and creating tangible output just like GUIs. Its main purpose is to teach people how to program, so I guess it&#39;s perfectly fine in taking aspects from both consoles and GUIs. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/09/04/usingobjects.html",
            "relUrl": "/2022/09/04/usingobjects.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Using Objects",
            "content": "Console Based Menu . Java imports allow user input and console output to be displayed in Terminal . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | . Other College Board Topics . A 2D array is used to store COLORS | A Control Structure, Switch, is used to process Menu select to code that performs related action | . Key PBL Topic . Menu class when instantiated with new Menu() takes over Frontend experience with user. This is relevant to Draw Lab in this article and how Spring Boot works in Web programming. Objects are intended to encapsulate Frontend, Backend or experience ... Web Site control flow, Database CRUD operations, or a Menu in terminal (this example) | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 30; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: System.out.println(&quot;Macro monkeys&quot;); default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 1: Hello, World! 2: DefaultRedGreenYellowBluePurpleCyanWhite 3: Loading...############################## 0: Goodbye, World! . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Using Objects . Javax Swing UI (JFrame) | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . Code.org Object Oriented Programming - The Neighborhood . Students learn fundamental Java concepts as they navigate and interact with The Neighborhood with Painter objects and create new types of Painters to expand the capabilities of their programs. . College Board Topics . Inheritance (extends) is introduced early in this activity | Conditional statements, While loops, and Boolean expressions | . Using Objects . Code.org Painter class and objects | . Activity Page Start: Code.org CSA1 . Hacks . College Board and CTE competences. . Documentation / Analysis. Describe with Markdown Cell(s) and triple backtick code fragments that answers to the following from your work... Explain where a Class is defined | Explain where an instances of a Class is defined | Explain where an object is Calling a Method | Explain where an object is Mutating data | Describe Console, GUI differences, or Code.org differences. | . | Exploration work Build a new Console or GUI lab for your own solution of interest, this is great opportunity to visualize data from Math, Physics, or other class using Math library. Look to make these changes in your work Make constructors of different signatures. | Use Wrapper Classes of Integer and Double for defining object instance or static data in the Class | Use the Math Class in performing calculations | . | Code.org learning Follow the Neighborhood lessons and work through the OOP Unit. | . Documentation/Analysis Hacks . Classes are usually defined at the very top of a java program, encapsulating basically everything. . Instances of classes (objects) are defined like so: &quot;Class object = new Class()&quot;, usually in main(). . Objects call methods using the dot operator (&quot;.&quot;), usually in main() as well. . // Class is defined here public class Test { public int number; public String word; public Test(int number, String word) { this.number = number; this.word = word; } public void talk() { System.out.println(this.word); } public static void main(String[] args) { // Class instance is defined here Test objectOne = new Test(17, &quot;Hello&quot;); // Object method is called here objectOne.talk(); // Object is mutating data here objectOne.number = 42; } } Test.main(null); . Hello . Console vs. GUI vs. Code.org . Consoles, GUIs, and Code.org are all places that code can be run, but each are very distinct and have different purposes. . Consoles such as terminal are probably the lowest level place to run code from, and thus they can have the most direct impacts on files in the computer. However, one downside is that everything is pretty much barebones since only ASCII characters can be displayed. Users can still enter inputs and receive outputs, but it&#39;s not very user friendly. Its main purpose is for developers and programmers to have a wider control over the machine they&#39;re using. . GUIs such as the browsers we use (Chrome, Edge, Bing, etc.) can be found in nearly every single device we use. They&#39;re quite user friendly and very clear, making it very convinient to use to perform certain tasks. However, it does come at the downside of being somewhat limited in its functionality. The GUIs have to simplify everything to give the user a good experience, but that also means certain things have to be left out. Its main purpose is to give users an easy experience to perform specific tasks. . Code.org seems to take aspects from both consoles and GUIs in that it requires specific commands to run just like consoles, but it&#39;s also quite user friendly in compiling and creating tangible output just like GUIs. Its main purpose is to teach people how to program, so I guess it&#39;s perfectly fine in taking aspects from both consoles and GUIs. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/pbl/2022/09/04/usingjavaobjects.html",
            "relUrl": "/pbl/2022/09/04/usingjavaobjects.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "My Journey",
            "content": "My Journey . Programming has always been quite a large part of my life. For a while, I never really thought about why. So that’s why I want to take a look back from the start. . The Beginning . I think I’ve always been interested in programming for as long as I could remember. My dad was a software engineer at HP, so if I had to say, my passion probably came from him. It was fun watching him type up copius amounts of code (which he still does), many parts of which I still wouldn’t understand to this day. . Block Coding . Like many others, my first real experience with programming probably came from block coding from sites such as code.org (hour of code) and Scratch. But it’s very common for a good reason. Block coding can easily teach the fundamentals of programming without the difficult learning curve of syntax. I still remember all the puzzles where I had to get my character (like Steve from Minecraft) to move somewhere and do something (like attack with a sword). . . Python . The first actual language I learned was Python on a site called Codecademy. Python was and still is a pretty good choice for beginners, due to its very forgiving syntax (although why would any language use indent as part of its syntax). There are (usually) no annoying methods or functions I need to know to do basic things and a lot of the processes are automatically performed by the compiler. However, due to it being a high-level language, efficiency is a lot lower than other languages. Plus, there was no reason to use its object-orientated programming syntax over other languages like C++ and Java. . C++ . C++ was quite a challenge to learn, as it was the first object-orientated language I tried to fully learn (I gave up on Java earlier). Learning how classes and objects operated was quite different from what I normally used in languages like Python, but it was well worth it. Knowing how to use objects and classes can be very powerful, as they basically allow anyone to create their own variable with custom properties. (I also “learned” how to use pointers, which can be its own topic). . . Today . Today, I am still code code coding in APCSA, picking up old things and learning new things. I’ve picked Java back up again as the main language we use (more successfully with my knowledge of C++) and I’ve learned how to use sites like GitHub, which can be useful for making huge projects with many collaborators. . Where To? . Obviously, my journey is still ongoing. I still have plans for other avenues, which I’ll probably start working on soon. Even though it’s been a long time since I’ve started programming, I still feel that I barely know anything, which is a good thing. Knowing less means that there’s more to learn. With all the time in the world, I’ll continue to grow as a programmer and maybe make some super cool things. . For now, I’ll just keep working on Java and Github though. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/2022/09/03/myjourney.html",
            "relUrl": "/markdown/2022/09/03/myjourney.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Code.org learning",
            "content": "Code.org Unit 1 . Code.org taught me a lot of useful things about object-orientated programming, specifically with the java language. It’s especially important to go over the creation and use of objects along with the inheritance of classes. . Objects . Objects are the main feature of java, and they represent instances of a class (a blueprint for these objects). Objects are unique in the way that they can have their own attributes and methods, allowing the programmer who makes the class to tailor their objects to certain specifications. By calling their methods (with the dot operator), a programmer can use objects to perform tasks. . Here’s an example of using an object to paint certain things in code.org: Note how the object is established with “PainterPlus myPainterPlus = new PainterPlus();” and how it accesses its methods such as myPainter.moveFast(); . Inheritance . One cool feature about classes in java is that class can inherit certain properties and methods from other classes. Members of the child class are able to access the same attributes and methods of the parent class, in the same way for both. Through this, programmers can create a very general parent class as a blueprint for more specific classes detailing attributes and methods specific to that class, while keeping the essential attributes and methods of the original. . Here’s an example of a class, PainterPlus, inheriting from the class Painter in code.org: Note how the class declaration of PainterPlus includes the “extends” keyword in order to inherit from Painter. . Here’s an example of how PainterPlus can use methods from both classes in code.org: Note how .move() is a method of Painter, while .turnRight() is a method exclusive to PainterPlus. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/pbl/2022/08/30/codeorg.html",
            "relUrl": "/markdown/pbl/2022/08/30/codeorg.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Vectors vs. Scalars",
            "content": "Vectors vs. Scalars . AP Physics is quite a daunting class, so it’s good to make note of the very important differences between certain concepts. Vectors and scalars are basically present in every single measurement taken in that class, so I think it’d be a good idea to distinguish between the two here. . Vectors . Vectors are magnitude + direction. . It describes a quantity that is in a certain direction. Examples include velocity and acceleration. . Scalars . Scalars are magnitude. . It describes a quantity that cannot be measured with a certain direction in mind. Examples include length and time. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/physics/2022/08/27/vectorsandscalars.html",
            "relUrl": "/markdown/physics/2022/08/27/vectorsandscalars.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "AP CSA Log 2 - The AP Exam",
            "content": "The AP Computer Science A Exam . This exam will basically determine if I get credit for this class or not, so it’s good to see how this test is actually broken down. . The exam lasts a total of 3 hours, and is broken into two portions: . Multiple Choice | Free Response | . Multiple Choice . The multiple choice segment, as its name suggests, is a bunch of multiple choice questions (40 in total) about programming. It’s worth 50% of the total exam, lasting for 1 hour and 30 minutes. The questions are usually individual, though 1 or 2 sets will appear (which have 2 questions). . Free Response . The free response segment consists of 4 questions about code implementation: . Question 1 deals with methods and control structures | Question 2 deals with classes | Question 3 deals with arrays and arraylists | Question 4 deals with 2d arrays | . This section also is worth 50% of the exam and lasts 1 hour and 30 minutes. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/college%20board/2022/08/27/csalog2.html",
            "relUrl": "/markdown/college%20board/2022/08/27/csalog2.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Recursion",
            "content": "Bailey Say . Recursion . Recursion is an important technique that can be used to solve certain problems in computer science. For example, what if you wanted to know the Fibonacci number at a certain index? Recursion can help. . How does recursion work? . Recursion occurs when a function calls itself as a part of its executables, meaning that it will be called numerous times when just calling it once. What does this look like? An easy example to show would be a method to find a certain number in the Fibonacci sequence: . public int fibonacciNumber(int termNumber) { . if (termNumber == 1) { . return 0; . } else if (termNumber == 2) { . return 1; . } else { . return this.fibonacciNumber(termNumber - 1) + this.fibonacciNumber(termNumber - 2); . } . } . Essentially, this function will try to find the value of a certain term in the Fibonacci sequence by adding its two previous values. This loops over and over again until reaching the first 2 numbers in the sequence, 0 and 1, which will be returned and make their way back up to the term number inputted by the user. Though this can be quite inefficient at larger amounts, it’s still a good example on how it can be implemented as a solution. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/25/recursion.html",
            "relUrl": "/2022/08/25/recursion.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Other Data Types",
            "content": "Primitives already went over ints, booleans, doubles, and Strings. These are a few of the other data types: . char: a single character (uses single quotes) | short: a more memory efficient version of int (with a smaller range) | long: a longer version of int, with a much larger range | float: similar to double, but can only hold 7 decimals instead of 15 | . Examples below . char letter = &#39;b&#39;; short shortNumber = 45; long longNumber = 100000; float floatNumber = 5.23f; .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/25/otherdatatypes.html",
            "relUrl": "/2022/08/25/otherdatatypes.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "AP CSA Log 1 - Git Hub",
            "content": "GitHub . GitHub is an online open source service for software development, and it’s one of the main softwares used in AP CSA. Mainly, it serves to control the version history of the many files in a project. . . How does GitHub work? . GitHub organizes projects into repositories, which are the main centers of controlling versions. When changes are made to one of the files, a programmer must make a “push” request (along with a quick message about it), which is basically asking the repository to review the changes and accept it, which is called “committing”. This is pretty useful for larger programs, as it’s important to keep track of all the changes made to a software (in case catastrophic errors occur in a sea of files). Though, on a smaller scale, it’s more tedious. GitHub can be linked to other softwares such as VSCode in order to make changes and push requests directly from there. . Summary . GitHub is pretty useful. 👍 .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/pbl/2022/08/25/csalog1.html",
            "relUrl": "/markdown/pbl/2022/08/25/csalog1.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Primitive Data Types",
            "content": "Example on how to use primitive data types. This particular example takes in Strings, booleans, ints, and doubles to convert certain units from metric to imperial. . import java.util.Scanner; public class Primitives { public static void main(String[] args) { Scanner input; double firstUnit, secondUnit; boolean userConfirm; int userOption; // Takes in String input input = new Scanner(System.in); System.out.println(&quot;Enter your name: &quot;); String name = input.nextLine(); input.close(); System.out.println(&quot;Hello &quot; + name + &quot;!&quot;); System.out.println(&quot;Welcome to the unit convertor!&quot;); // Loop of conversions while (true) { // Takes in boolean input System.out.println(&quot;Would you like to convert something (true/false): &quot;); input = new Scanner(System.in); userConfirm = input.nextBoolean(); input.close(); if (userConfirm) { //Takes in int input System.out.println(&quot;Here are a list of options below:&quot;); System.out.println(&quot; t1. Pounds (lbs) to grams (g)&quot;); System.out.println(&quot; t2. Grams (g) to pounds (lbs)&quot;); System.out.println(&quot; t3. Feet (ft) to meters (m)&quot;); System.out.println(&quot; t4. Meters (m) to feet (ft)&quot;); System.out.println(&quot;What would you like to convert (enter int): &quot;); input = new Scanner(System.in); userOption = input.nextInt(); input.close(); switch (userOption) { // Lbs to grams case 1: System.out.println(&quot;Enter the amount in lbs (double): &quot;); input = new Scanner(System.in); firstUnit = input.nextDouble(); secondUnit = firstUnit * 453.592; System.out.println(firstUnit + &quot; lbs is &quot; + secondUnit + &quot; g.&quot;); input.close(); break; // Grams to lbs case 2: input = new Scanner(System.in); System.out.println(&quot;Enter the amount in g (double): &quot;); firstUnit = input.nextDouble(); secondUnit = firstUnit * 0.00220462; System.out.println(firstUnit + &quot; g is &quot; + secondUnit + &quot; lbs.&quot;); input.close(); break; // Ft to m case 3: input = new Scanner(System.in); System.out.println(&quot;Enter the amount in ft (double): &quot;); firstUnit = input.nextDouble(); secondUnit = firstUnit * 0.3048; System.out.println(firstUnit + &quot; ft is &quot; + secondUnit + &quot; m.&quot;); input.close(); break; // M to ft case 4: input = new Scanner(System.in); System.out.println(&quot;Enter the amount in m (double): &quot;); firstUnit = input.nextDouble(); secondUnit = firstUnit * 3.28084; System.out.println(firstUnit + &quot; m is &quot; + secondUnit + &quot; ft.&quot;); input.close(); break; } } else { break; } } } } Primitives.main(null); . Enter your name: Hello USER! Welcome to the unit convertor! Would you like to convert something (true/false): Here are a list of options below: 1. Pounds (lbs) to grams (g) 2. Grams (g) to pounds (lbs) 3. Feet (ft) to meters (m) 4. Meters (m) to feet (ft) What would you like to convert (enter int): Enter the amount in g (double): 54.0 g is 0.11904948 lbs. Would you like to convert something (true/false): .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/22/primitives.html",
            "relUrl": "/2022/08/22/primitives.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Bash Tutorial",
            "content": "Code below does two things. First, it checks for a directory of a project and creates one if it doesn&#39;t exist. Then, it checks for a repo in the directory and creates one if it doesn&#39;t exist. . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/congenial-tribble # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/horizon-ab/congenial-tribble&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Basic Bash Commands . &quot;ls&quot; =&gt; lists computer files in current directory &quot;cd&quot; =&gt; changes directories &quot;pwd&quot; =&gt; prints current directory &quot;echo&quot; =&gt; displays text/string passed as argument . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . &quot;cat&quot; =&gt; reads data from a file and gives content as output . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . Env, Git, and Github . &quot;env&quot; =&gt; shows setting for shell &quot;git clone&quot; =&gt; sets up director of files &quot;cd $project&quot; =&gt; lets user move inside that directory of files &quot;.git&quot; =&gt; hidden directory; creates relationship between machine and GitHub . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config . Hacks . Updating repository . echo &quot;Use git fetch to check update repositories&quot; # Repository to check export repository=&quot;congenial-tribble&quot; cd $HOME/vscode/$repository git fetch origin git merge origin master . Use git fetch to check update repositories Already up to date. . Tool Checks . Checking that I have certain tools installed on my repository . Checking Python . python3 --version python2 --version . Python 3.10.5 Python 2.7.18 . Checking Jupyter . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3105jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 /Users/baileysay/.vscode/extensions/ms-toolsai.jupyter-2022.4.1021342353/temp/jupyter/kernels/python3105jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 bash /Users/baileysay/Library/Jupyter/kernels/bash java /Users/baileysay/Library/Jupyter/kernels/java javascript /Users/baileysay/Library/Jupyter/kernels/javascript python3 /Users/baileysay/opt/anaconda3/share/jupyter/kernels/python3 . Checking Anaconda . conda list . # packages in environment at /Users/baileysay/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 nbstripout 0.6.0 pypi_0 pypi ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/22/bashtutorial.html",
            "relUrl": "/2022/08/22/bashtutorial.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Python Jupyter Notebook",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/19/hellopython.html",
            "relUrl": "/2022/08/19/hellopython.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Java Jupyter Notebook",
            "content": "System.out.println(&quot;Hello&quot;); . Hello .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/19/hellojava.html",
            "relUrl": "/2022/08/19/hellojava.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Computer Science A Goals",
            "content": "Computer Science A . Hello . I’m Bailey and this is my first markdown post, so I guess I’ll talk about computer science. . Computer Science . Computer Science is pretty interesting. A lot of things use computers nowadays, so it’d be useful to understand the process behind making the software that is so eminent in our lives. . . Goals . There are a lot of things I want to accomplish this year, including: . Making my first functioning project | Not failing | Experiencing the pain software engineers go through | .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/2022/08/19/firstpost.html",
            "relUrl": "/markdown/2022/08/19/firstpost.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Fastpages Notebook Blog Post",
            "content": ". toc: true badges: true comments: true categories: [jupyter] . image: images/chart-preview.png . About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2020/02/20/test.html",
            "relUrl": "/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post19": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://horizon-ab.github.io/congenial-tribble/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://horizon-ab.github.io/congenial-tribble/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}