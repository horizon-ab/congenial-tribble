{
  
    
        "post0": {
            "title": "Unit 8 - 2D Arrays",
            "content": "Learning Objective! . Represent collections of related primitive and object reference data using two dimensional array objects. . 2D Array Vocab: . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array Is public, so can be accessed in any class | Is also final, so can’t change it after array has been created | . | . The Basics: . A 2D array is an array of arrays, and can be a better way to store data | Declaring a 2D array: DataType[][] nameOf2DArray | . | Initializing a 2D array DataType[][] nameOf2DArray = new DataType[r][c]; r = # of rows The # of arrays in the array | r = list.length c = # of columns | . | The # of elements in the inner arrays | c = list[0].length | . | . | . | . Initializing a Sample Array: . public class Test { public static void main(String[] args) { int[][] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }; System.out.println(&quot;arr[0][0] = &quot; + arr[0][0]); System.out.println(&quot;arr[1][2] = &quot; + arr[1][2]); System.out.println(&quot;arr[2][1] = &quot; + arr[2][1]); } } Test.main(null); . arr[0][0] = 1 arr[2][0] = 6 arr[2][1] = 8 . Accessing and Updating Elements of a 2D Array: . nameOf2DArray[r][c] | . Hack 1: Access the last element of the 2D Array list: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! System.out.println(arr[2][2]); } } Test.main(null); . i . a quick tip for the future: list[list.length - 1][list[0].length - 1] | Updating an element: list[r][c] = value; | . | . Hack 2: Changing a Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); arr[2][0] = &quot;Athens&quot;; System.out.println(arr[2][0]); } } Test.main(null); . Change Austin to Athens and print! Athens . Nested Loops, Our Beloved: . You can use Nested Loops to traverse 2D Arrays for example: to print out an entire array in order, you need to use these | . | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Make sure your columns for loop is always inside your rows for loop! Unless you want it printed the other way of course | . | Print spaces and lines in between to make a neater matrix | . Hack 3: Unknown Dimensions: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Print out the array without using numerical values! for (String[] row : arr) { for (String place : row) { System.out.print(place + &quot; &quot;); } System.out.println(); } } } Test.main(null); . Atlanta Baltimore Chicago Australia Boston Cincinnati Austin Beaumont Columbus . Searching for a Value in a 2D Array: . Here&#39;s a quick example to illustrate: | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Note: in the code, you see the use of : which essentially means within. | . Hack 4: Finding the Min/Max Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; String shortest = arr[0][0]; // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); for (String[] row : arr) { for (String place : row) { if (place.length() &gt; longest.length()) { longest = place; } else if (place.length() &lt; shortest.length()) { shortest = place; } } } System.out.println(&quot;Longest: &quot; + longest); System.out.println(&quot;Shortest: &quot; + shortest); } } Test.main(null); . Use nested for loops to find the longest or shortest string! Longest: Cincinnati Shortest: Boston . HW! . Please submit screenshots of your 4 hacks up and running to our Google Form, which also has a few 2D array related multiple choice questions. . Additionally, Complete and send a screenshot of your code for 2017 FRQ Q4: Successor Array in that same google form. . Please submit as a pair or group. . 2017 FRQ Q4: Successor Array . public class Position { /** Constructs a Position object with row r and column c. */ public Position(int r, int c) { /* implementation not shown */ } // There may be instance variables, constructors, and methods that are not shown. } public class Successors { // Part A public static Position findPosition(int num, int[][] intArr) { for (int i = 0; i &lt; intArr.length; i++) { for (int j = 0; j &lt; intArr[0].length; j++) { if (element == arr[i][j]) { return new Position(i, j); } } } return null; } // Part B public static Position[][] getSuccessorArray(int[][] intArr) { Position[][] successoryArray = new Position[intArr.length][intArr[0].length]; for (int i = 0; i &lt; intArr.length; i++) { for (int j = 0; j &lt; intArr[0].length; j++) { successorArray[i][j] = findPosition(intArr[i][j] + 1, intArr); } } return successorArray; } } .",
            "url": "https://horizon-ab.github.io/congenial-tribble/jupyter/2022/12/06/unit82darrays.html",
            "relUrl": "/jupyter/2022/12/06/unit82darrays.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit4grading",
            "content": "Trimester 1, Period 2 Unit 4 Grading . The same grade is given to every member of the team, based on what they submitted. The reason we did this was to encourage pair programming and asking teammates to fix problems and write the best code. . Scoring: . 1 - Code works perfectly, but also does something special or interesting showing complete understanding of concepts. . 0.9 - Code works perfectly, meeting all of the requirements. . 0.8 - Code works, but there are a few mistakes (mainly typos). . 0.7 - Code is dysfunctional and difficult to understand (luckily nobody got this). . Table Members Score Brief Reason . 1 | Divya, Linda, Rebecca, Vaishavi | 1 | Interesting if statements | . 2 | Riya Patil, Vidhi Kulkarni, Lily Wu, William Wu | 0.9 | Code works | . 3 | Karthik Valluri, Sanja Bharadwaj, Evan Yang, Pranav Sarathy | 0.9 | Code works in decrypting data | . 4 | Rohan Juneja, Kinish Sathish, Gabriel Boudreau, Jay Manjrekar | 0.8 | Code clean but could probably optimize for caps | . 5 | Meena, Pranavi, Madhumita, Shraddha | 0.9 | Code works | . 6 | Kurtis, Nathan, Sahil, Rohit | 0.9 | Code works | . 7 | Reem Ben Ishai, Akhil Nandhakumar, Saathvika Ajith, Tristan Copley | 1 | Code is good and written in an interesting way | . 8 | Bailey Say, Andrew Meng, Nicholas Mounier, Rohan Gaikwad | N/A | N/A | . 9 | Brian Tang, Hetvi Trivedi, Jazair Tallman, Ellen Xu | 0.8 | A few typos | . 10 | Calissa Tyrrell, Evan Sanchez, Samuel Wang, Kian Pasokhi | 0.8 | A few typos | .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/12/01/unit4grading.html",
            "relUrl": "/2022/12/01/unit4grading.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Array List Lesson",
            "content": "Lesson Purpose and Objectives . Learn about the structure and functions of an arrayList and go over the key College Board concepts for arrayLists . ArrayLists are only 2.5%-7.5% but have many concepts from other units and are a good data structure to know. Also, the 3rd question of the FRQ is based on ArrayLists . 7.1 Introduction to ArrayList . Arrays ArrayLists . Static (fixed size) | Dynamic (can change size) | . Fundamental java feature | Part of a framework. Someone was nice and designed this with the behind the scenes being arrays | . An object with no methods | A class with many methods | . Not as flexible | Designed to be more flexible | . Can store more primitive data | Not designed to store primitives, they store object references | . | Slightly slower than Arrays | . | Can only be used with an import statement | . Real Life Array Example: You always have to have five players on the court . Real Life ArrayList Example: In dodgeball, the number of people in the game is changing based on who comes in or gets out . Primitive Data Types: . boolean | char | double | int | . Wrapper Class Data Types (Store the primitive values as objects) . Boolean | Character | Double | Integer | . import java.util.ArrayList; //you must import the java.util package // Instantiating: ArrayList&lt;DataType&gt; variableName = new ArrayList&lt;&gt;(n); //DataType must be nonprimitive data type public class introArrayList { public static void main (String[] args) { ArrayList&lt;Integer&gt; e1 = new ArrayList&lt;Integer&gt;(); //empty ArrayList&lt;String&gt; e2 = new ArrayList&lt;String&gt;(5); //5 elements ArrayList&lt;Dogs&gt; e3 = new ArrayList&lt;Dogs&gt;(); //you can store whatever objects you want } } . 7.2 ArrayList Methods . There are a lot of cool methods that you can use with arrayLists, but here are the ones College Board wants you to know for 7.2: . size(); . Returns the number of elements in the list | . add(obj); . Adds element at the end | . add(index, object); . Adds element at specific index | . remove(index); . Removes element from specific index | . set(index, object); . Replaces element at index with new object | . get(index); . Returns element at index | . import java.util.ArrayList; public class methodsArrayList { public static void main (String[] args) { ArrayList&lt;String&gt; dogs = new ArrayList&lt;String&gt;(Arrays.asList(&quot;Sparky&quot;, &quot;Duke&quot;, &quot;Noodle&quot;)); ArrayList&lt;String&gt; dogs2 = new ArrayList&lt;&gt;(Arrays.asList(&quot;Sparky&quot;, &quot;Duke&quot;, &quot;Noodle&quot;)); System.out.println(&quot;There are &quot; + dogs.size() + &quot; in the ArrayList&quot;); System.out.println(&quot;There are &quot; + dogs2.size() + &quot; in the ArrayList&quot;); //objects you add must be of the same data type dogs.add(&quot;Peanut&quot;); System.out.println(&quot;There are now &quot; + dogs.size() + &quot; dogs in the ArrayList&quot;); String myDog = dogs.get(2); System.out.println(&quot;My dog is named &quot; + myDog); } } //Note: you don&#39;t need to declare &lt;String&gt; again after new ArrayList methodsArrayList.main(null); . There are 3 in the ArrayList There are 3 in the ArrayList There are now 4 dogs in the ArrayList My dog is named Noodle . //Hmmmm... seems suspect import java.util.ArrayList; public class example { public static void main (String[] args) { ArrayList&lt;Boolean&gt; questions = new ArrayList&lt;&gt;(); questions.add(true); questions.add(false); myMethod(questions); } public static void myMethod(ArrayList arr) { if (arr.size()&gt;0) { arr.set(0,&quot;Hello&quot;); //String with boolean??? Uh oh! System.out.println(arr.get(0)); } } } example.main(null); . Hello . import java.util.ArrayList; public class example { public static void main (String[] args) { ArrayList&lt;Boolean&gt; questions = new ArrayList&lt;&gt;(); questions.add(true); questions.add(false); myMethod(questions); } public static void myMethod(ArrayList&lt;Boolean&gt; arr) { if (arr.size()&gt;0) { arr.set(0,&quot;Hello&quot;); //String with boolean??? Uh oh! System.out.println(arr.get(0)); } } } example.main(null); //Make sure to specify data type so the compiler is more helpful and it avoids confusion //This also applies for returning and arrayList as well . | arr.set(0,&#34;Hello&#34;); //String with boolean??? Uh oh! incompatible types: java.lang.String cannot be converted to java.lang.Boolean . //Returning an ArrayList public static ArrayList methodName (ArrayList arr){ return arr; } . // HACK!!!! // Create an arrayList and use one of the cool methods for it import java.util.ArrayList; public class hack1 { public static void main (String[] args) { ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;(); numbers.add(1); numbers.add(2); numbers.add(3); for (int number : numbers) { System.out.println(number * 2); } } } hack1.main(null); . 2 4 6 . 7.3 Traversing ArrayLists . there are 2 ways to traverse arraylists: for loops and enhanced for loops | use get() instead of bracket notation for getting an element of an arraylist | use size() to find number of elements in arraylist instead of using .length | . for loop . import java.util.*; public class main { public static void main(String[] args) { List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5); for (int i = 0; i &lt; numbers.size(); i++) { System.out.print(numbers.get(i) + &quot; &quot;); } } } main.main(null); . 1 2 3 4 5 . enhance for loops . import java.util.*; public class main { public static void main(String[] args) { List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5); for ( int num : numbers ) System.out.print(num + &quot; &quot;); } } main.main(null); . 1 2 3 4 5 . Common Mistakes . don&#39;t forget to import java.util.ArrayList | don&#39;t declare or instantiate ArrayList with a primitive data type, which are things such as int, double, and booleans. | don&#39;t forget the parentheses at the end of the constructor and the element types with the brackets: ArrayList list = new ArrayList(); &lt;/li&gt; don&#39;t confuse arrays with arraylists, don&#39;t use [], don&#39;t use .length use .size() instead | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Hack #2 . import java.util.ArrayList; ArrayList&lt;String&gt; color = new ArrayList&lt;String&gt;(); color.add(&quot;red apple&quot;); color.add(&quot;green box&quot;); color.add(&quot;blue water&quot;); color.add(&quot;red panda&quot;); /*/ using if(color.get(i).contains(&quot;red&quot;)) iterate through the arraylist and remove all elements that contain the word red in them /*/ for (int i = 0; i &lt; color.size(); i++) { if (color.get(i).contains(&quot;red&quot;)) { color.remove(i); } } System.out.println(color); . [green box, blue water] . 7.4 Developing Algorithms Using ArrayLists . Modify Array Values . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); for (int i = 0; i &lt; num.size(); i++) { num.set(i, num.get(i) * 2); } System.out.print(num); . [10, 2, 6] . find max value . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int maxValue = num.get(0); for (int number: num) { if (number &gt; maxValue) { maxValue = number; } } System.out.print(maxValue); . 5 . find min value . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int minValue = num.get(0); for (int number: num) { if (number &lt; minValue) { //if new min value found, replace current minValue minValue = number; } } System.out.print(minValue); . 1 . Hack #3 . // find the sum of the elements in the arraylist ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int sum = 0; for (int number : num) { sum += number; } System.out.println(sum); . 9 . 7.5 Searching . Often times we need to locate data inside linear structures. Normally we would use for loops in order to specify each element, one at a time, and do not need to track the index after execution. | . for ( int index = 0; index &lt; items.size(); index++ ){ //forward searching if ( items.get(index) == num ){ return index; } } . Important Things to Keep in Mind . When looking at int values, the == operator should be used. | When searching for a double value, we need to make sure the value is close enough by doing some math. | Object instances should always use the .equals(otherThing) method to check for a match. | . When searching a linear structure we need to send it the structure and what we are looking for as parameters. A standard for loop with an if block is all we need to search any linear structure. . public int whereIsMyNumber(int magicNumber, int [] myNumbers) { for (int index = 0; index &lt; myNumbers.length; index++) //search through every single spot { if (myNumbers[index] == magicNumber) //do they match? if so return index { return index; } } return -1; // if searched through every single spot, indicate its not there } . You shouldn&#39;t use the == operator when looking for an object. It will only return true if the variable and the element stored at the index point to the same memory, are aliases of each other. | . Here is an example of how you would search for a traditional object: . public int findTheWord(String searchedPhrase, ArrayList&lt;Book&gt; myBooks) { for (int index = 0; index &lt; myBooks.size(); index++) //search through every book in structure { Book currentBook = myBooks.get(index); //hold current book with current book variable String currentPhrase = currentBook.getDescription(); //get description of current book and store in variable currentPhrase if (currentPhrase.equals(searchedPhrase)) //if parameter = current phrase of book looking at - using .equals instead of == operator { return index; } } return -1; //if no match found, indicate its not there } . 7.6 Sorting . Selection sort identifies either the maximum or minimum of the compared values and iterates over the structure checking if the item stored at the index matches the condition, if so, it will swap the value stored at the index and continue. | The insertion sort is characterized by building a sorted structure as it proceeds. It inserts each value it finds at the appropriate location in the data structure. This is often accomplished by using a while loop as the inner loop. | . for (int outer = 1; outer &lt; randomList.size(); outer++) { DebugDuck tested = randomList.get(outer); //extract out a value out of list, passes to outer int inner = outer - 1; //goes back and compares to previous while ( inner &gt;= 0 &amp;&amp; tested.compareTo(randomList.get(inner)) &lt; 0 ) //checks to see if index is valid { randomList.set(inner + 1, randomList.get(inner)); //move up by one and replace original location inner--; } randomList.set(inner + 1, tested); //anything taken out would be placed back into structure } . 7.7 Ethical Issues Around Data Collection . Safety with Data Collection . It is very important to minimize user data collection in our programs. While collecting data in a smaller program may not be a big issue, establishing good practices with data security is always a safer bet when eventually moving to larger projects that manage data. . Whenever you come across data that you no longer will need, it is a good practice to explicitly remove that data altogether. . import java.util.Scanner; import java.util.Arrays; public class dataRemoval { public static void main(String[] args) { // just a scanner object Scanner sc = new Scanner(System.in); // makes an arraylist with some users already in it ArrayList&lt;String&gt; userList = new ArrayList&lt;&gt;(Arrays.asList(&quot;Kian&quot;, &quot;Kiannp44@gmail.com&quot;, &quot;Samuel&quot;, &quot;samuelwaang@gmail.com&quot;, &quot;Calissa&quot;, &quot;calissaT@gmail.com&quot;)); // takes user&#39;s name System.out.println(&quot;Log in &quot;); System.out.println(&quot;Please enter your name:&quot;); String name = sc.nextLine(); System.out.println(name); userList.add(name); // takes user&#39;s email System.out.println(&quot;Please enter your email:&quot;); String email = sc.nextLine(); System.out.println(email); userList.add(email); // prints all the current users in arraylist System.out.println(); System.out.println(&quot;Current users in databse &quot;); System.out.println(userList); // prompt to log out System.out.println(); System.out.println(&quot;Would you like to log out? (y/n)&quot;); String logOut = sc.nextLine(); if (logOut.equals(&quot;y&quot;)) { // if user logs out, remove their name and email from arraylist System.out.println(logOut); userList.remove(name); userList.remove(email); } // reprints current users in arraylist System.out.println(); System.out.println(&quot;Current users in database &quot;); System.out.println(userList); } } dataRemoval.main(null); . Log in Please enter your name: Evan Please enter your email: evanjoelsanchez@gmail.com Current users in databse [Kian, Kiannp44@gmail.com, Samuel, samuelwaang@gmail.com, Calissa, calissaT@gmail.com, Evan, evanjoelsanchez@gmail.com] Would you like to log out? (y/n) y Current users in database [Kian, Kiannp44@gmail.com, Samuel, samuelwaang@gmail.com, Calissa, calissaT@gmail.com] . Anonymizing Personal Data . Instead of using names for users, we can use hash codes instead, which means that each user will simply be identified by their hash code. . public class hashUsers { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String name = sc.nextLine(); // this .hashCode() method will convert the name to a code which cannot be traced back to that original name int id = name.hashCode(); name = null; // name is now null, and nobody will ever know the original name I put in System.out.println(&quot;Hash Code: &quot; + id); } } hashUsers.main(null); . Hash Code: 2172094 . The Takeaway . It is important to understand that as a programmer handling user data, it is your responsibility to protect that collected data. The less data you collect, the less you have to safeguard. A compromised database will generally be an expensive lawsuit in a large scale project. . Homework . Quizizz . . &lt;/div&gt; | .",
            "url": "https://horizon-ab.github.io/congenial-tribble/java/labs/2022/11/30/unit7arraylists.html",
            "relUrl": "/java/labs/2022/11/30/unit7arraylists.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "The Euclidean Algorithm",
            "content": "Underlying Properties . I shamelessly pulled everything from this article . The Euclidean Algorithm takes advantages of two properties: . GCD(A, 0) = A, GCD(0, B) = B | Given that A = B * Q + R (B != 0, Q is an integer), then GCD(A, B) = GCD(B, R) | . Explaining the first property is pretty simple. Since A is obviously the greatest divisor of itself, and 0 can divide any number, therefore GCD(A, 0) = A (and similarly for B). . Explaining the second property is more complicated. Suppose A - B = C. . First prove that GCD(A, B) evenly divides C. . A = X * GCD(A, B) . B = Y * GCD(A, B) . A - B = C . X GCD(A, B) - Y GCD(A, B) = C . (X - Y) * GCD(A, B) = C . Therefore GCD(A, B) evenly divides C. . Next, prove that GCD(B, C) evenly divides A. . A - B = C . B + C = A . M GCD(B, C) + N GCD(B, C) = A . (M + N) * GCD(B, C) = A . Therefore GCD(B, C) evenly divides A. . Next, prove that GCD(A, B) = GCD(A, A - B) . GCD(A, B) is given to evenly divide B. GCD(A, B) is proven to evenly divide C. Therefore, GCD(A, B) is a common divisor of B and C. . GCD(A, B) &lt;= GCD(B, C) because GCD(B, C) is the greatest common divisor of B and C. . GCD(B, C) is given to divide B. GCD(B, C) is proven to divide A. Therefore, GCD(B, C) is a common divisor of A and B. . GCD(B, C) &lt;= GCD(A, B) because GCD(A, B) is the greatest common divisor of A and B. . Since GCD(A, B) &lt;= GCD(B, C) and GCD(B, C) &lt;= GCD(A, B), . Therefore, GCD(A, B) = GCD(B, C). . A - B = C . GCD(A, B) = GCD(B, C) . GCD(A, B) = GCD(B, A - B) . Therefore, GCD(A, B) = GCD(B, A - B). . Summed up in this image: . Finally, prove GCD(A, B) = GCD(B, R). . GCD(A, B) = GCD(B, A - B) . GCD(A, B) = GCD(A - B, B) (The order of the terms doesn&#39;t matter) . GCD(A, B) = GCD(A - B, B) = GCD(A - 2B, B) = GCD(A - 3B, B) = ... = GCD(A - Q * B, B) (Repeated application of property) . A = Q * B + R . R = A - Q * B . GCD(A, B) = GCD(R, B) . GCD (A, B) = GCD(B, R) (The order of the terms doesn&#39;t matter) . Example . Say you want to find the GCD of 147 and 91. . GCD(147, 91) = GCD(91, 147 % 91), and this can be applied multiple times over . 147 % 91 = 56 . GCD(91, 56) = GCD(56, 91 % 56) . 91 % 56 = 35 . GCD(56, 35) = GCD(35, 56 % 35) . 56 % 35 = 21 . GCD(35, 21) = GCD(21, 35 % 21) . 35 % 21 = 14 . GCD(21, 14) = GCD(14, 21 % 14) . 21 % 14 = 7 . GCD(14, 7) = GCD(7, 14 % 7) . 14 % 7 = 0 . GCD(7, 0) = 7 . Therefore, the GCD of 147 and 91 is 7. . As you can see, repeatedly abusing the second property breaks down the huge number until reaching GCD(A, 0) or GCD(0, B), which easily simplifies to A or B respectively. . Implementation . Though the exact explanation is complicated, implementing it happens to be a lot more fun (and simple). I decided to utilize a recursory function to achieve this, taking the remainder over and over again until reaching 0, which would then return the GCD all the way back up. . public class EuclideanAlgorithm { public static int gcd(int a, int b) { if (b == 0) { // Final case of GCD(A, 0) = A return a; } else { return gcd(b, a % b); // Simplify the equation down } } public static void main(String[] args) { System.out.println(gcd(294, 182)); // Test case } } EuclideanAlgorithm.main(null); . 14 . What&#39;s the Point? . Basically this is useful for taking the modulus of super large numbers (combined with other modulus properties), which is utilized heavily in cryptography. It&#39;s also useful for determining if two numbers are coprime to one another, which can be used in more number theory related math. I might delve more into the math behind cryptography in the future, but stuff like this is good for now. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/personal/2022/11/10/euclideanalgorithm.html",
            "relUrl": "/personal/2022/11/10/euclideanalgorithm.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Trimester 1 Notes (Units 1-6)",
            "content": "Trimester 1 Notes . Notes for all of the College Board units covered so far. . Unit 1: Primitive Types . Numerous primitive datatypes Ints | Booleans | Chars | Doubles | . | Naming conventions Lowercase then capital | No special characters or keywords | . | Casting Convert primitives | . | Operators +, -, *, /, %, //, etc. | . | . Homework . Unit 2: Using Objects . Instances of a class | Reference types | Void methods vs Non-void methods No return type vs return type | . | Static methods vs Non-static methods Can be called by class vs can’t be called by class | . | Import external libraries | . Homework . Unit 3: Boolean Expressions and If Statements . Control operators | Evaluates to true or false and converges from then | If, else-if, and else | De Morgan’s Law | . Homework . Unit 4: Iteration . For, while, and for-each loops | Infinite loops | String manipulation through iteration | Do-While Loops Have the condition at the very end of the loop | The loop is always run at least once (unlike while loops) | . | . Our group created the lesson . Unit 5: Writing Classes . Creation of classes Constructors (overloading) | . | Access modifiers Public - everything can access the class | private - only the class itself + instances of it can access the class | protected - only the class itself along with child classes + instances of either can access the class | Data encapsulation | . | Getters and setters | . Homework . Unit 6: Arrays . Array Creation Constructors vs. pre-initialized arrays | . | Traversing arrays Iteration (for, while, and for-each loops) | Using algorithms to manipulate each element | . | . Homework . Unit 7: ArrayLists . Dynamic data structure from imported class ArrayList | Use Wrapper classes (in generics) to store primitive datatypes | . Homework . Unit 8: 2D Arrays . Unit 9: Inheritance . Classes are allowed to inherit attributes and methods from other classes using the “extends” keyword Class inheriting is the child class, class being inherited from is the parent class | . | super() can be used to call methods (and constructors) from the parent class inside the child class Subclass constructor can use super() to quickly set attributes originally from the parent class | . | Polymorphism Child class can be treated as an instance of its parent class (referencing superclass of object) Child won’t be able to access its own methods this way | . | Methods can be overriden with new definitions @Override keyword | . | Methods can be overloaded with different function signatures Same name, different parameters | . | . | Late binding - Methods are searched for by the compiler during runtime, not during the compilation of the code. | Abstract class + methods Abstraction | Cannot create an object from it directly, must be created using a child class inheriting from the abstract class | Abstract methods originally only have their signature created and must be fully established in the child class definition | . | Standard methods - methods inherited from the original Object class toString() - will usually print out the memory address of an object, can be overriden to print more specific information about the object in question | equals() - checks if two objects are equal using “==” (which checks if the two memory addresses point to the same object); can also be overriden for more specific terms of being equal | hashCode() - generates a unique numeric ID for each object, which can be used to check if they’re equal to one another; can also be overriden for more specific terms | . | . Unit 10: Recursion . Big O Notation - function used to represent the run time of certain algorithms and functions Hash Maps - O(1) (in most cases) | Binary Search - O(log(n)) | Single Loop - O(n) | Nested Loop - O(n^2) | . | .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/college%20board/2022/11/08/trimester1notes.html",
            "relUrl": "/markdown/college%20board/2022/11/08/trimester1notes.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Test Corrections",
            "content": "The AP Collegeboard Test . For our final for APCSA trimester one, we had to take a test on college board on crucial concepts in Java. I got 33/40, which still gets me 100% in the class, but these are the corrections for the 7 questions I missed. . Question 22 . . I got this question wrong because I thought that you had to specify a method would be overriden when creating a new function in the child class with the same method signature as a function in the parent class. However, this was wrong. That’s why D is wrong. . My other mistake was that I didn’t realize that, since books only takes in a list of the object Book, using a child class AudioBook to create an object in the list is valid, but it’ll only be considered as a Book and will be unable to access methods unique to its child class. That’s why the correct answer is B, because books[0] can’t access methods that are in the child class. . Question 28 . . I’m not exactly sure why I got this wrong, but I think it’s because I thought the loop would always run, therefore x would never be equal 1 after the loop, which is false, because n can be given a value less than 2. That’s why B is wrong. . E is right because the conditions for the loop to run necessitates that n is greater than 2, therefore it’ll always be greater than 2 inside the loop. . Question 34 . . I don’t know why I got this question wrong. I realized that I wouldn’t work because it never sets the center point and III wouldn’t work because the Circle class can’t access private attributes, but I still chose the wrong answer. I think I just misclicked. . Question 35 . . I got this question wrong because I forgot to consider result * 10 in the reassignment of result. I thought that the program simply summed up the digits in the number, which is why I chose 18. But result * 10 actually means that the digits in the number are being switched around, which is why 4752 is the right answer. . Question 38 . . I got this question wrong because I forgot to consider that y being greater than 10000 is not necessary for the expression to evaluate to be true. My response does evaluate to true if y &gt; 10000, but I forgot that the other conditions of x &lt; 1500 and x &gt; 1000 can also be true to make the expression evaluate to be true. . Option A does consider both of these options, which is why it’s the correct answer. . Question 39 . . This question was really hard for me. The double recursion made things super confusing for me, until I realized that the loop of recursion would continue until n was less than or equal to 10. I thought that the answer must be less than 10, which is why I chose 8, but I forgot to realize it would multiple it by 2 one last time before returning n, which is why 16 is actually the right answer. . Question 40 . . I didn’t realize that the program would print temp instead of the original string, which is why I thought it would still print “WATCH” at the end and not just “WATC”. That’s why Option C is the right answer and not Option D. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/college%20board/2022/11/07/testcorrections.html",
            "relUrl": "/markdown/college%20board/2022/11/07/testcorrections.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Array Lesson - Team 5",
            "content": "Arrays Overview . Arrays are 10-15% of the AP CSA Exam | The four main topics that College Board wants you to know Array creation and access | Traversing arrays | Enhanced for loops for arrays | Developing algorithms using arrays | . | The overall purpose of arrays is to store multiple values in a single variable, instead of declaring separate variables for each value. | . 6.1 Array Creation and Access . Arrays are used to store one data type | Unlike Arraylists, arrays have a fixed size and cannot be changed | Arrays can be denoted using braces {} Below is an example of a simple array storing our scrum team names [Meena, Shraddha, Madhumita, Pranavi] . | To use an array you have to use the command import java.util.Arrays; . | . Making Arrays . There are two ways to make arrays . using constructors | using pre-intiliazed arrays | . dataType[] arrayName = new dataType[numberOfItems]; //Constructor int[] arraySample = {1,3,5,7,9}; //pre-initialized arrays . Accessing Elements in Arrays . You can access the elements in an array using different commands | . arrayName.Length //determine the size arrayName.length - 1 //to access the last item in the array . Hack 1 . How do we access the even numbers in arrayOne from above? . int[] arrayOne = {1, 3, 5, 7, 9}; for (int i = 0; i &lt; arrayOne.length; i++) { if ((i + 1) % 2 == 0) { System.out.println(arrayOne[i]); } } . 3 7 . Hack 2 . Which of the following is FALSE about arrays . A. A java array is an object | B. Length of array can be changed after creation of array | C. Numerical data types of arrays are initialized to 0 to start | . B is FALSE . 6.2 Traversing Arrays . Traversing is accessing every value in the array | Can be done using a loop like a for loop or while loop | Below is an example - using a for loop, we can iterate through each fruit in the array of Strings and print it out | . // Here is the array we will be working with String[] myFruits = new String[] {&quot;Apple&quot;, &quot;Strawberry&quot;, &quot;Watermelon&quot;, &quot;Blueberry&quot;}; for (int i = 0; i &lt; myFruits.length; i++) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); } . Can also loop through an array in reverse | . for (int i = myFruits.length - 1; i &gt;= 0 ; i--) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); } . If we have a list of numbers, we could change each value in the array by a certain amount | . // Here is the array we will be working with int[] myNumbers = new int[] {1, 3, 5, 7, 9}; for (int i = 0; i &lt; myNumbers.length; i++) { // add 10 to each element in the array myNumbers[i] += 10; System.out.println(&quot;New element &quot; + i + &quot; is &quot; + myNumbers[i]); } . We can also traverse an array using a while loop | . // Here is the array we will be working with String[] myFruits = new String[] {&quot;Apple&quot;, &quot;Strawberry&quot;, &quot;Watermelon&quot;, &quot;Blueberry&quot;}; int i = 0; while (i &lt; myFruits.length) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); i++; } . Bound Errors . ArrayIndexOutOfBoundsException thrown, can happen when using loops to access array elements | In the example below instead of the condition being while the index is less than the length of the array, the condition is less than or equal too | This mean the loop will try to run when i = 4 (since the length of the list is 4). However since array index starts from 0, the last item in the array will have an index of 3. So, index of 4 will be out of bounds, resulting in the error. | . int i = 0; while (i &lt;= myFruits.length) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); i++; } . Hack 3 . Create a function that takes in a list of integers and returns the list with the integers in ascending order. Print every element in this list | Example int[] myNumbers = new int[] {5, 3, 4, 1, 2}; | arraySorter(myNumbers); | Expected Output 1 | 2 | 3 | 4 | 5 | . | . | . public class AL { public static void ascending(int[] array) { Arrays.sort(array); for (int number : array) { System.out.println(number); } } public static void main(String[] args) { int[] myNumbers = new int[] {5, 3, 4, 1, 2}; ascending(myNumbers); } } AL.main(null); . | a type with the same simple name is already defined by the static single-type-import of Arrays | Arrays.sort(array); reference to Arrays is ambiguous both class Arrays in and class java.util.Arrays in java.util match . Hack 4 . Given the following code segment, which of the following will cause an infinite loop? Assume that temp is an int variable initialized to be greater than zero and that a is an array of integers. | . for ( int k = 0; k &lt; a.length; k++ ) { while ( a[ k ] &lt; temp ) { a[ k ] *= 2; } } . A. The values don&#39;t matter this will always cause an infinite loop. | B. Whenever a includes a value that is less than or equal to zero. | C. Whenever a has values larger then temp. | D. When all values in a are larger than temp. | E. Whenever a includes a value equal to temp. | . 6.3 Enhanced for loop for Arrays . This topic was pretty short, but essentially what you need to know is about the enhanced for loop. The enhanced for loop can be used to traverse through most data structures (i.g. arrays). However, it can only traverse in a forward direction. Usually the structure is like so . for (dataType i: arrayName) { do something with i } . Essentially, this code mentions how every element in the array (i) has to have something done to it. It&#39;s important to note that although there is access to the element i, but it isn&#39;t possible to change the value/set new values to element i. . We can use mutator methods on objects on the array to set the value of their instance variables. This is because i is a copy of the object reference, which means that i refers to the same object as the array element, so calling methods on i is the same as calling methods on the individual array elements themselves. For example . public class Student { private String name; /** Sets the name of the Student */ public void setName(String name) { this.name = name; } /** Other instance variables, methods, and constructors not shown */ } // IN ANOTHER CLASS /** Resets all students&#39; names */ public static void doubleArray(Student[] array, String defaultName) { for (Student student: array) { student.setName(defaultName); // Sets each student&#39;s name to a default name } } . Hack 5 . In this example, each loop includes an int array and a String array. Try adding another high score and another name to the arrays and se if you can get it to run. . public class ForEachDemo { public static void main(String[] args) { int[] highScores = { 10, 9, 8, 8, 11}; String[] names = {&quot;Jamal&quot;, &quot;Emily&quot;, &quot;Destiny&quot;, &quot;Mateo&quot;, &quot;Bailey&quot;}; // for each loop with an int array for (int value : highScores) { System.out.println( value ); } // for each loop with a String array for (String value : names) { System.out.println(value); // this time it&#39;s a name! } } } ForEachDemo.main(null); . 10 9 8 8 11 Jamal Emily Destiny Mateo Bailey . Hack 6 . What code would you add to the following to output the length of each String that&#39;s returned from the below method? Choose A, B, C, or D. . 6.4 Developing Algorithms using Arrays . Here are some algorithms that arrays can be used for (from college board standards), . Minimum and Maximum of a list of elements | Compute the sum, average, or mode of multiple elements | Determine if at least one element has a property | Access consecutive pairs of elements | Determine duplicates | . What to use when problem solving with arrays .length can be used to find the length of an array . The value at a specific index can be found with array[i], where i is the index | An element at index i can be replaced using array[i] = new element | You can iterate over an array with a for loop for(type element: array) { code here . | . Computing Sums with Arrays . See the code below for a sample algorithm of how to compute the sum of elements in an array. This could be applied to finding the mean, standard deviation, or any other algorithm that requires summation. . int[] array = {5, 1, 78}; // intialize int sum = 0; // variable to keep track of sum for (int number : array) { // iterates over each loop in the array sum += number; // the number is added to the sum } System.out.println(sum); //expected sum is 84, so 84 should be printed . 84 . Find the max . // from college board private double findMax(double[] values) { double max = values[0]; // initialize max with first element of array for(int i=1; i&lt;values.length; i++) { // starting with the second element, iterate over the rest of the array if (values[i] &gt; max) { // if the current element is greater than the max max = values[i]; // set the max equal to the greatest value until that point } } return max; } . Find the amount of even numbers. . private int findEvenNumbers(int[] values) { int evenCount = 0; // initalize count of even numbers to zero for(int value: values) { // iterate over every element of array if(value % 2 == 0) { // use modulus operator to check if value is even evenCount += 1; // increment evenCount if the value is even } } return evenCount; } . Hack 7 . Return a left-shifted array . Ex . {7,9,4} --&gt; {9,4,7} | {1,2,3} --&gt; {2,3,1} | {0,9} --&gt; {9,0} | {1} --&gt; {1} | . Hack 8 . Find the number of duplicate elements in an array. . Hack 9 . Use arrays to reverse a string. . Ex . &quot;hello &quot; --&gt; &quot;olleh &quot; | &quot;slay &quot; --&gt; &quot;yals &quot; | &quot;mom &quot; --&gt; &quot;mom &quot; | . Homework . Finish the FRQ part a for homework. This free response question deals with arrays. . public void addMembers(String[] names, int gradYear) { for (String name : names) { memberList.add(new MemberInfo(name, gradYear, true)); } } .",
            "url": "https://horizon-ab.github.io/congenial-tribble/jupyter/2022/10/25/unit6arrays.html",
            "relUrl": "/jupyter/2022/10/25/unit6arrays.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Project Overview",
            "content": "The Idea: Science Olympiad Website . Science Olympiad is a nationwide competition which hosts competitions centering around science, whether it be in anatomy, astronomy, forestry, forensics, and more. Many students come and compete in these competitions from all over the nation, going from regional, to state, all the way to national. . As a matter of fact, Del Norte happens to have one of these Science Olympiad teams at its school. Unfortunately, the official website for the team is not great: . . Since 2 members of our group are in Science Olympiad (including myself), we decided to partner up with another team in period 1 to rebuild the entire website from the ground up to ensure that all of its members don’t have to suffer through bad GUI. . Game Plan . So how are we going to rebuild this website? . It’s quite a daunting task, so we decided to split the entire website up into a bunch of systems we need to implement, including but not limited to: . Login Function | Event Lists | Student Lists | Event Material API | Search Bar | etc. | .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/pbl/2022/10/25/projectoverview.html",
            "relUrl": "/markdown/pbl/2022/10/25/projectoverview.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 5 HW",
            "content": "Code FRQ . StepTracker, object w/ parameter that defines min steps to be active . methods: . addDailySteps, once per day | activeDays | averageSteps, returns avg num steps per day (total steps/number of days) | . Write the StepTracker class . public class StepTracker { // initialize variables private int minActiveSteps private int totalSteps private int numTotalDays private int numActiveDays // set default construct public StepTracker(int minActiveSteps) { this.minActiveSteps = minActiveSteps; this.totalSteps = 0; this.numTotalDays = 0; this.numActiveDays = 0; } // once per day, increment steps, days, and possibly active public void addDailySteps(int numSteps) { this.totalSteps += numSteps; this.numTotalDays++; if (numSteps &gt;= this.minActiveSteps) { this.numActiveDays++; } } // getter public int activeDays() { return this.numActiveDays; } // calculate public double averageSteps() { if (numTotalDays == 0) { return 0.0; } else { return (double) this.totalSteps/this.numTotalDays; } } } . Overview . here is where the private initial variables are stored: . private int minActiveSteps private int totalSteps private int numTotalDays private int numActiveDays . now for constructor: . public StepTracker(int minActiveSteps) { this.minActiveSteps = minActiveSteps; this.totalSteps = 0; this.numTotalDays = 0; this.numActiveDays = 0; } . It sets the default minactivesteps, and sets all the rest to 0. . public void addDailySteps(int numSteps) { this.totalSteps += numSteps; this.numTotalDays++; if (numSteps &gt;= this.minActiveSteps) { this.numActiveDays++; } } . It adds the steps to the total steps, and if the steps is over the active threshold, the active days will increase. . public int activeDays() { return this.numActiveDays; } . just a getter . public double averageSteps() { if (numTotalDays == 0) { return 0.0; } else { return (double) this.totalSteps/this.numTotalDays; } } . If there is 0 days, return 0 cuz thats what it says in the q . otherwise return steps/days to get average steps . Extra Notes . Class Creation . All classes should be capitalized to distinguish them from primitive datatypes (naming conventions). Constructors are necessary for each class in order for them to initialize their internal attributes, though they&#39;re special in that they do not require a return type because the object is being created in its stead. . Accessors and Mutators . Accessor methods (called getters) allow code outside of the class to access private variables. They&#39;re public methods that return private attributes, allowing the class to control access to its private attributes. . Mutator methods (called setters) allow code outside of the class to change private variables. They&#39;re public methods that take in a parameter (the new value) and return nothing, allowing the class to control outside code changing its private attributes. . Static variables and methods . Static variables (also known as class variables) are variables that are shared by the entire class, meaning that it will be the same for every instance of an object. It&#39;s useful for when certain attributes need to be standardized for an entire class (i.e. any object of a quadrilateral class must have the number of sides set equal to 4). . Static methods (also known as class methods) are methods that can be called using the class itself (along with objects of the class). Essentially, they make it easy for outside code to call certain methods specific to a class without having to instantiate a new object every single time, which can be seen in common imported Java classes such as Math. . Access modifiers . This . The keyword &quot;this&quot; inside classes means that the object will reference itself as the called object, meaning that the class can make self references even before having any objects created. The most common usage of this can be seen inside of constructors, where attributes are self-referenced to instantiate values. . Main method vs. Tester methods . The Main method is the method which starts the entire program along will all of its associated files. This is what actually starts the program and all of its components. Tester methods are usually public static void main(String[] args) methods inside of all the other classes in order to test that certain features inside of each class are working. As such, they are not called when the main method is run and only serves to make sure everything works. . public class Rhombus { private static int sides = 4; private String name; private double[] angles; public Rhombus(String name, double[] angles) { this.name = name; this.angles = angles; } public String getName() { return this.name; } public void setName(String name) { this.name = name; } public static int getSides() { return sides; } public static void main(String[] args) { Rhombus timmy = new Rhombus(&quot;Tim&quot;, new double[]{90, 90, 90, 90}); } } Rhombus.main(null); .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/10/24/unit5classes.html",
            "relUrl": "/2022/10/24/unit5classes.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 3 Booleans and If Statements",
            "content": "Homework . int a = 1; int b = 3; int c = 1; double d = Math.pow(b, 2) - 4 * a * c; if (d &gt; 0) { double root1 = (-b + Math.sqrt(d)) / (2 * a); double root2 = (-b - Math.sqrt(d)) / (2 * a); System.out.println(&quot;The roots are &quot; + root1 + &quot; and &quot; + root2 + &quot;.&quot;); } else if (d == 0) { double root = -b / (2 * a); System.out.println(&quot;The only root is &quot; + root + &quot;.&quot;); } else { System.out.println(&quot;The roots are imaginary.&quot;); } . The roots are -0.3819660112501051 and -2.618033988749895. . double input = 25; if (input == 0) { System.out.println(&quot;zero&quot;); } else if (input &gt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;small positive&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;large positive&quot;); } else { System.out.println(&quot;positive&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;small negative&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;large negative&quot;); } else { System.out.println(&quot;negative&quot;); } } . positive . import java.util.Scanner; Scanner in = new Scanner(System.in); System.out.print(&quot;Input floating-point number: &quot;); double x = in.nextDouble(); System.out.print(&quot;Input floating-point another number: &quot;); double y = in.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } . Input floating-point number: Input floating-point another number: They are the same up to three decimal places . import java.util.Scanner; Scanner in = new Scanner(System.in); System.out.print(&quot;Input an alphabet: &quot;); String input = in.next().toLowerCase(); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Error. Not a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;Error. Not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(&quot;Input letter is Vowel&quot;); } else { System.out.println(&quot;Input letter is Consonant&quot;); } . Input an alphabet: Input letter is Consonant . int i; System.out.println (&quot;The first 10 natural numbers are: n&quot;); for (i=1;i&lt;=10;i++) { System.out.println (i); } System.out.println (&quot; n&quot;); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . import java.util.Scanner; int i,n=0,s=0; double avg; { System.out.println(&quot;Input the 5 numbers : &quot;); } for (i=0;i&lt;5;i++) { Scanner in = new Scanner(System.in); n = in.nextInt(); s +=n; } avg=s/5; System.out.println(&quot;The sum of 5 no is : &quot; +s+&quot; nThe Average is : &quot; +avg); . Input the 5 numbers : The sum of 5 no is : 20 The Average is : 4.0 . import java.util.Scanner; int j,n; System.out.print(&quot;Input the number(Table to be calculated): &quot;); { System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; n&quot;); for(j=0;j&lt;=n;j++) System.out.println(n+&quot; X &quot;+j+&quot; = &quot; +n*j); } . Input the number(Table to be calculated): Input number of terms : 5 X 0 = 0 5 X 1 = 5 5 X 2 = 10 5 X 3 = 15 5 X 4 = 20 5 X 5 = 25 . import java.util.Scanner; int i,j,n; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(j); System.out.println(&quot;&quot;); } . Input number of rows : 1 12 123 1234 12345 123456 1234567 12345678 123456789 . import java.util.Scanner; int i,j,n,k=1; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(k++); System.out.println(&quot;&quot;); } . Input number of rows : 1 23 456 78910 1112131415 . import java.util.Scanner; int numberOfRows; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); numberOfRows = in.nextInt(); int number = 1; for (int row = 1; row &lt;= numberOfRows; row++) { for (int column = 1; column &lt;= row; column++) { System.out.print(number + &quot; &quot;); number++; } System.out.println(); } . Input number of rows : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 . Extra Notes . Truth Tables . Truth tables can be used to visualize boolean conditionals. They&#39;re useful for evaluating basic boolean expressions as well as more complicated compound boolean expressions, which use multiple kinds of boolean operators inside each other. . De Morgan&#39;s Law . De Morgan&#39;s Law is a bit more mathematical in nature, dealing with set theory, so I&#39;ll try my best to describe it here. . De Morgan&#39;s Law basically explains how certain boolean statements can be rewritten as different expressions, yet essentially be the same. More specifically, it states that &quot;The complement of the union of two sets is the same as the intersection of their complements&quot; or &quot;The complement of the intersection of two sets is the same as the union of their complements&quot;. . What the heck does that mean? An easier way to think about it would be like this: . not (A or B) = (not A) and (not B) | not (A and B) = (not A) or (not B) | . In a more formalalized, mathematical way: . . But even with all that text, it&#39;s still pretty confusing, right? So it&#39;s probably best to visualize it using an actual image. This one I found online pretty much summarizes it best: . . The green shaded area is basically what&#39;s being covered in each equality. Both sides cover the same thing. . Finally, let&#39;s go through an example of how this would apply in code. Essentially, we&#39;ll use a few variables to make a whole bunch of complicated compounded boolean expressions that actually mean the same exact thing: . public class deMorgansLaw { public static void main(String[] args) { boolean a = false; boolean b = true; // These two statements are exactly equal according to De Morgan&#39;s law // In this case, the only way to yield an output of true would be to have both a and b to be false (change it to check) System.out.println(!(a || b)); System.out.println(!a &amp;&amp; !b); boolean c = true; boolean d = false; // These two statements are also exactly equal according to De Morgan&#39;s Law // In this case, the only way to yield an output of false would be to have both c and d to be true (change it to check) System.out.println(!(c &amp;&amp; d)); System.out.println(!c || !d); } } deMorgansLaw.main(null); . false false true true . Comparison of Various Datatypes . Numbers . Numbers such as integers, doubles, and floats can be compared using operators found in basic math such as: . == | != | &lt; | &gt; | &lt;= | &gt;= | . Strings . Strings can be compared using the String method .equals() which checks if the objects that calls and is called are equal to each other (based on the alphanumeric contents of both) . Objects . Objects can be compared with two different methods, equals() (similar to comparing Strings) and hashCode(). Without overriding any methods, equals() checks if the two objects are equal using &quot;==&quot; operator (which checks if the object references point to the same object) and hashCode() generates a unique ID for each object to check if two objects are the same. In a more practical sense, both equals() and hashCode() should be overriden to better match the specific class being used. . // Numbers System.out.println(4 &gt; 3); System.out.println(5 != 5); // Strings System.out.println(&quot;Hello World&quot;.equals(&quot;Hello World&quot;)); System.out.println(&quot;Code Code Code&quot;.equals(&quot;code code code&quot;)); // Objects public class Name { private String first; public Name(String first) { this.first = first; } } Name name1 = new Name(&quot;Bailey&quot;); Name name2 = new Name(&quot;Bailey&quot;); System.out.println(name1.equals(name2)); System.out.println(name1.hashCode() == name2.hashCode()); . true false true false false false .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/10/20/unit3booleans.html",
            "relUrl": "/2022/10/20/unit3booleans.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 2 Objects",
            "content": "FRQ 2021 . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ public WordMatch(String word) { /* implementation not shown */ this.secret = word; } /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ // START OF SOLUTION A public int scoreGuess(String guess) { // Tracks number of times the substring appears int occurrences = 0; // secret.length() - guess.length() to avoid index overflow with substring later on for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { // Checks if the substring is equal to the guess if (secret.substring(i, i + guess.length()).contains(guess)) { occurrences++; // Moves forward by guess.length() - 1 to move forward in the string (and avoid repeats) // -1 is included because i++ i += guess.length() - 1; } } return occurrences * guess.length() * guess.length(); } // END OF SOLUTION A // START OF SOLUTION B public String findBetterGuess(String guess1, String guess2) { /* to be implemented in part (b) */ if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } else if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } else if (guess1.compareTo(guess2) &gt; 0) { return guess1; } else { return guess2; } } // END OF SOLUTION B public static void main(String[] args) { WordMatch testA = new WordMatch(&quot;mississippi&quot;); System.out.println(testA.scoreGuess(&quot;issippi&quot;)); System.out.println(testA.scoreGuess(&quot;mississippi&quot;)); WordMatch testB = new WordMatch(&quot;concatenation&quot;); System.out.println(testB.findBetterGuess(&quot;ten&quot; , &quot;nation&quot;)); System.out.println(testB.findBetterGuess(&quot;con&quot;, &quot;cat&quot;)); } } WordMatch.main(null); . Test . Extra Notes . Concatenation . Concatenation is the process of combining 2 or more strings together to form 1 string. It&#39;s pretty simple to do with just the &quot;+&quot; operator between two strings (or alternatively the concat() method). Using mixed datatypes together is also pretty easy, as Java will automatically cast different datatypes into Strings when needed, making the entire process much easier. . int numOfCats = 34; String sentencep1 = &quot;I have &quot;; System.out.println(&quot;I have 34 cats!&quot;); System.out.println(&quot;I have &quot; + numOfCats + &quot; cats!&quot;); . I have 34 cats! I have 34 cats! . Math Class . The Math class is one class that is useful for many programmers, especially considering its numerous mathematical operations that are necessary in a math-heavy field like computer science. One such method is Math.random(), which can allow programmers to simulate randomness (to a certain extent) by generating a random double from 0 to just below 1, which can be edited to encompass nearly any range of numbers. . // Randomnly prints out a number from 1 to 10 System.out.println((int)(Math.random() * 10 + 1)); . 5 .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/10/18/unit2objects.html",
            "relUrl": "/2022/10/18/unit2objects.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 1 Primitives",
            "content": "Primitives . Vocab: . String literals - String created using double quoted String | Literals - String created by calling the constructor | Exceptions - errors thrown by the program | Syntax error - error created by bad code syntax | Logic error - error created by impossibilities during runtime (i.e. 0/0) | Overflow error - error created by amounts of data too large for certain dataypes to hold (i.e. floats with too many decimals) | Operation precedence - some operators are prioritized (use PEMDAS) | . Primitives are datatypes used in Java as some of its most basic features. . Compared with non-primitives: . Predefined vs. defined by the programmer | Lowercase vs. uppercase | Can&#39;t call methods vs. can call methods | Must have a value vs. can be null | Different sizes (depending on primitive type) vs. same size | . Some of the most basic primitives include: . Booleans | Ints | Doubles | Chars | Etc. | . They have particular naming conventions (lowercase, no special characters/keywords) and can also be type casted (manually or automatically) . They can use numerous operators to manipulate these types in differing ways depending on the primitive: . +, -, *, /, %, etc. | ++ and -- are special incrementing operators, which is equal to x = x + 1 and x = x - 1 | . public class Primitives { public static void main(String[] args) { boolean bool = true; int num1 = 42; double num2 = 2.718; System.out.println(num1); num1 = num1 + 36; System.out.println(num1); System.out.println(num2); num2 = num2 % 1.6; System.out.println(num2); } } Primitives.main(null); . 42 78 2.718 1.1179999999999999 . Homework . import java.util.Scanner; public class GradeCalculator { public static void separate() { Scanner input = new Scanner(System.in); System.out.println(&quot;What is your current grade?&quot;); double grade = input.nextDouble(); System.out.println(&quot;How much percent of your grade is the final?&quot;); double percent = } public static void test() { Scanner input = new Scanner(System.in); } public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(&quot;Is the final in the tests category?&quot;); boolean isTest = input.nextBoolean(); input.close(); if (isTest) { test(); } else { separate(); } } } GradeCalculator.main(null); . Is the final in the tests category? . Extra Notes . Casting . Casting is a method of forcefully changing the data type of data, though it won&#39;t work in every instance. For instance, a String (obviously) cannot be converted into an int, but an int can be converted into a String. . There are many uses for casting. When dividing with integers, results are automatically truncuated into whole numbers, which can be annoying for many reasons. However, when the integers are casted into doubles, then the result will be a double with the correct accuracy. On the other hand, sometimes truncuated integer results are required from doubles, and the solution is to cast the result into an int. . // Division int num1 = 4; int num2 = 3; System.out.println((double)(num1) / (double)(num2)); // Truncuation/Rounding double num3 = 5.0; double num4 = 2.0; System.out.println((int)(num3 / num4)); . 1.3333333333333333 2 . Wrapper Classes . When it&#39;s more useful to turn a primitive datatype into an object (like for parsing and stuff), wrapper classes are used for each of the primitives: . Integer for int | Long for long | Float for float | Double for double | Boolean for boolean | Character for char | . Some instances where wrapper classes are required include the use of ArrayLists, which can only store objects. Therefore, all primitive datatypes stored must be converted into their wrapper class equivalents: . ArrayList&lt;Double&gt; list = new ArrayList&lt;Double&gt;(); ArrayList&lt;Character&gt; list2 = new ArrayList&lt;Character&gt;(); .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/10/16/unit1primitives.html",
            "relUrl": "/2022/10/16/unit1primitives.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Lists and ArrayLists",
            "content": "import java.util.ArrayList; import java.util.Scanner; public class Planner { private ArrayList&lt;String&gt; planner = new ArrayList&lt;String&gt;(); public Planner() { Scanner input = new Scanner(System.in); int choice; boolean proceed = true; while (proceed) { showPlanner(); System.out.println(&quot;Enter your choice: &quot;); choice = input.nextInt(); switch (choice) { case 1: addItem(); break; case 2: addMultipleItems(); break; case 3: if (!planner.isEmpty()) { removeItem(); } else { System.out.println(&quot;There&#39;s nothing to remove!&quot;); } break; case 4: if (!planner.isEmpty()) { planner.clear(); } else { System.out.println(&quot;There&#39;s nothing to remove!&quot;); } break; case 5: if (!planner.isEmpty()) { planner.findItem(); } else { System.out.println(&quot;There&#39;s nothing to find!&quot;); } break; case -1: proceed = false; break; default: System.out.println(&quot;Please input a valid option&quot;); } } input.close(); } public void showPlanner() { System.out.println(&quot;--&quot;); System.out.println(&quot;Here is your list of things to do:&quot;); if (!planner.isEmpty()) { for (int i = 0; i &lt; planner.size(); i++) { System.out.println((i + 1) + &quot;. &quot; + planner.get(i)); } } else { System.out.println(&quot;Your planner is empty!&quot;); } System.out.println(&quot;--&quot;); System.out.println(&quot;What would you like to do next?&quot;); System.out.println(&quot;1. Add an item&quot;); System.out.println(&quot;2. Add multiple items&quot;); System.out.println(&quot;3. Remove an item&quot;); System.out.println(&quot;4. Remove all items&quot;); System.out.println(&quot;5. Find item&quot;); System.out.println(&quot;-1. Quit&quot;); System.out.println(&quot;--&quot;); } public void addItem() { Scanner input = new Scanner(System.in); System.out.println(&quot;Enter an item: &quot;); String newItem = input.nextLine(); planner.add(newItem); } public void addMultipleItems() { Scanner input = new Scanner(System.in); System.out.println(&quot;How many items would you like to add: &quot;); int itemCount = input.nextInt(); ArrayList&lt;String&gt; newItemList = new ArrayList&lt;String&gt;(); for (int i = 0; i &lt; itemCount; i++) { System.out.println(&quot;Enter an item: &quot;); newItemList.add(input.nextLine()); } planner.addAll(newItemList); } public void removeItem() { Scanner input = new Scanner(System.in); System.out.println(&quot;1. Remove by index&quot;); System.out.println(&quot;2. Remove by name&quot;); System.out.println(&quot;Select an option: &quot;); int choice = input.nextInt(); switch (choice) { case 1: System.out.println(&quot;Enter the exact index (the number next to it): &quot;); int index = input.nextInt(); planner.remove(index - 1); break; case 2: System.out.println(&quot;Enter the exact item (case sensitive): &quot;); String trashItem = input.nextLine(); planner.remove(trashItem); break; default: System.out.println(&quot;That&#39;s not an option!&quot;); } } public void findItem() { Scanner input = new Scanner(System.in); System.out.println(&quot;Enter an index: &quot;); int index = input.nextInt(); try { System.out.println((index + 1) + &quot;. &quot; + planner.get(index)); } catch (Exception e) { System.out.println(&quot;That index isn&#39;t in the planner!&quot;); } } public static void main(String[] args) { Planner test = new Planner(); } } Planner.main(null); . -- Here is your list of things to do: Your planner is empty! -- What would you like to do next? 1. Add an item 2. Add multiple items 3. Remove an item 4. Remove all items 5. Find item -1. Quit -- Enter your choice: Enter an item: -- Here is your list of things to do: 1. Hello -- What would you like to do next? 1. Add an item 2. Add multiple items 3. Remove an item 4. Remove all items 5. Find item -1. Quit -- Enter your choice: How many items would you like to add: Enter an item: Enter an item: -- Here is your list of things to do: 1. Hello 2. 3. Code -- What would you like to do next? 1. Add an item 2. Add multiple items 3. Remove an item 4. Remove all items 5. Find item -1. Quit -- Enter your choice: -- Here is your list of things to do: Your planner is empty! -- What would you like to do next? 1. Add an item 2. Add multiple items 3. Remove an item 4. Remove all items 5. Find item -1. Quit -- Enter your choice: Enter an item: -- Here is your list of things to do: 1. -1 -- What would you like to do next? 1. Add an item 2. Add multiple items 3. Remove an item 4. Remove all items 5. Find item -1. Quit -- Enter your choice: . Design Process . Coming up with the idea was relatively simple. Students (especially those with 4 APs and extracurriculars) need planners to organize everything they need to do, so why not make one using Java? . I decided to go for an object-orientated design, with the creation of the object handling all of the options. An infinite while loop is used to keep iterating over the added options and the choice entry, with only the entry of &quot;-1&quot; breaking the loop and ending the planner. . There are 5 options (with 1 extra to end it), utilizing numerous methods in the ArrayList interface. Option 1 utilizes .add(), 2 utilizes .addAll(), 3 utilizes .remove() (both method signatures), 4 utilizes .clear(), and 5 utilizes .get(). .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/10/05/listsandarraylists.html",
            "relUrl": "/2022/10/05/listsandarraylists.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Translator",
            "content": "Translator Please type in the box below and press the &quot;translate&quot; button to translate any message from English to Spanish. . Enter English here: Translate! Spanish: . .",
            "url": "https://horizon-ab.github.io/congenial-tribble/fun/translator",
            "relUrl": "/fun/translator",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Arrays and Images",
            "content": "Saving PNG to GIF . Image IO read and Image IO write are focus of this code. A key portion of working with Images, or any file, is to know location of the input and output directories. . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Image Scaling and ASCII Conversion . In this example we print out a row of text for each row in the image. However, it seems as if the image is too tall. To address this problem, try to output a single character per block of pixels. In particular, average the grayscale values in a rectangular block that’s twice as tall as it is wide, and print out a single character for this block. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Hacks . Continue to work with Classes, Arrays, and 2D arrays. FYI, you may need to make a directory /tmp under notebook images. . Look at comments above and see if there is better conversions for ASCII to reduce elongation and distortion. | Try to convert images into Grey Scale, Red Scale, Blue Scale, and Green Scale. | Additional Image Code . Runtime using Thymeleaf . Personal Hacks . For these hacks, I&#39;ll be making the red-scale, green-scale, blue-scale, and gray-scale conversions first, and then I&#39;ll fix the compression issue. . I also decided to use an abstract class just for some extra efficiency and practice with it. . Just for reference, I&#39;ll be using this photo: . . Template . It&#39;s annoying to have to write the same code to construct each image and get their properties, so I just decided to write that all here. . Some of the code is copied from above; I took the constructor, setStats(), and resize(). Those functions are pretty optimized already, so trying to remake them is pointless. What I do need to optimize with completelly new code is the color scaling and ASCII conversions, which will be later. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; abstract class ImageBlueprint { protected final String inDir = &quot;images/&quot;; // location of images protected final String outDir = &quot;images/tmp/&quot;; // location of created files protected String inFile; protected String resizedFile; protected String colorFile; protected String ext; // extension of file protected long bytes; protected int width; protected int height; // get attributes of picture public ImageBlueprint(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.colorFile = this.outDir + name + &quot;New&quot; + &quot;.png&quot;; this.setStats(); } public ImageBlueprint(String image) { this(image, &quot;png&quot;); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } //ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // Will be used later protected abstract void conversion(); } . Seeing Red... Green... Blue... and Gray . Now that I&#39;ve written the template, it&#39;s actually pretty easy to scale everything to a certain color. . For the primary colors, all that&#39;s needed is to set the values of the non scaled color to be 00 (for example red-scaling would have green and blue be set to 00). . Gray-scaling is a bit more complicated. There are multiple methods that, in theory, should work. According to one website I found, there are two methods: average or weighted. Average is as simple as it seems - just take the average of all three values: . Grayscale = (R + G + B) / 3 . However, due to the way that humans perceive light (with different sensitivities for different colors), this isn&#39;t the most accurate. This leads to the weighted method, based on the way humans actually weigh different colors of light in their vision:&gt; Grayscale = 0.299R + 0.587G + 0.114B I got the information on grayscaling from here, so click that link to learn more about it. . Since the weighted method is more efficient, that&#39;s what I&#39;ll be using here. Actually implementing it was pretty difficult though. Instead of using the numeric RGB values, I had to calculate the luminance in order to make everything work. . public class RedConversion extends ImageBlueprint { public RedConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Red&quot; + &quot;.png&quot;; } public RedConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Red&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(col.getRed(), 0, 0).getRGB(); img.setRGB(j, i, rgb); } } //System.out.println(&quot;for loop done&quot;); try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { RedConversion nicandrohan = new RedConversion(&quot;nicandrohan&quot;, &quot;png&quot;); nicandrohan.conversion(); } } . . public class GreenConversion extends ImageBlueprint { public GreenConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Green&quot; + &quot;.png&quot;; } public GreenConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Green&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(0, col.getGreen(), 0).getRGB(); img.setRGB(j, i, rgb); } } // System.out.println(&quot;for loop done&quot;); try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { GreenConversion nicandrohan = new GreenConversion(&quot;nicandrohan&quot;, &quot;png&quot;); nicandrohan.conversion(); } } . . public class BlueConversion extends ImageBlueprint { public BlueConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Blue&quot; + &quot;.png&quot;; } public BlueConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Blue&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(0, 0, col.getBlue()).getRGB(); img.setRGB(j, i, rgb); } } // System.out.println(&quot;for loop done&quot;); try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { BlueConversion nicandrohan = new BlueConversion(&quot;nicandrohan&quot;, &quot;png&quot;); nicandrohan.conversion(); } } . . public class GrayConversion extends ImageBlueprint { public GrayConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Gray&quot; + &quot;.png&quot;; } public GrayConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Gray&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { //Color col = new Color(img.getRGB(j, i)); //int rgb = new Color((int)(0.299 * col.getRed()), (int)(0.114 * col.getGreen()), (int)(0.587 * col.getBlue())).getRGB(); int rgb = img.getRGB(j, i); int r = (rgb &gt;&gt; 16) &amp; 0xFF; int g = (rgb &gt;&gt; 8) &amp; 0xFF; int b = (rgb &amp; 0xFF); // Normalize and gamma correct: float rr = (float) Math.pow(r / 255.0, 2.2); float gg = (float) Math.pow(g / 255.0, 2.2); float bb = (float) Math.pow(b / 255.0, 2.2); // Calculate luminance: float lum = (float) (0.2126 * rr + 0.7152 * gg + 0.0722 * bb); // Gamma compand and rescale to byte range: int grayLevel = (int) (255.0 * Math.pow(lum, 1.0 / 2.2)); int gray = (grayLevel &lt;&lt; 16) + (grayLevel &lt;&lt; 8) + grayLevel; img.setRGB(j, i, gray); } } // System.out.println(&quot;for loop done&quot;); try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { GrayConversion nicandrohan = new GrayConversion(&quot;nicandrohan&quot;, &quot;png&quot;); nicandrohan.conversion(); } } . . ASCII Hell . Finally, I&#39;m going to convert images to ASCII characters. The problem with the old method was that it stretched the image out too much and didn&#39;t look good at all. I found that the best solution would be to take 4 rows and 2 columns of pixels and convert them into a single ASCII character, so that&#39;s what I implemented here. . Also, as a side note, I basically just copied the previous code and edited that. No point in reinventing the wheel once you already get what&#39;s happening. . Additionally, (I didn&#39;t have to, but) I tried to fix the ASCII characters to be more evenly spaced out. I decided to use the link provided and found a chart of 94 characters organized by those that took the most dark space to those that took the least. . Now here&#39;s the fun math part. I wanted to get a mostly divisible number but 94 only factors into 47 and 2, so I rounded to 90 and decided to take 15 of those ASCII characters to use. Then, I took every 6th character in the character list to get my values. Next, I derived an equation to get the thresholds. Since the max value of RGB is 255 and the max percentage of coverage is 23.1%, I got t = (1 - 1/0.23) * 255 to find the thresholds. Finally, I compared each character and plugged its respective coverage percent into the equation to get every threshold. . As for the results, they went a bit differently than how I expected. I&#39;m not going to show them here, but they&#39;re a lot more detailed than the original ASCII calculator. Unfortunately, I don&#39;t think it looks super good with smaller images, so I decided to keep the old conversion. . public class ASCIIConversion extends ImageBlueprint { public ASCIIConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;ASCII&quot; + &quot;.txt&quot;; } public ASCIIConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;ASCII&quot; + &quot;.txt&quot;; } @Override protected void conversion() { // Controls how big chunks are taken for ASCII characters final int XLENGTH = 1; final int YLENGTH = 2; BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; Color col = null; try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.colorFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i += 4) { for (int j = 0; j &lt; img.getWidth(); j += 2) { // colorSum stores total sum of RGB values, counter keeps track of how many are being counted // colorSum/counter = average // average is taken to get ASCII character double colorSum = 0; int counter = 0; for (int k = 0; k &lt; XLENGTH; k++) { for (int l = 0; l &lt; YLENGTH; l++) { if (k &lt; img.getWidth() &amp;&amp; l &lt; img.getHeight()) { counter++; col = new Color(img.getRGB(j + k, i + l)); colorSum += (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); } } } double average = colorSum / counter; try { asciiPrt.print(asciiChar(average)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; // Higher quality, looks better with bigger images // if (g &gt;= 224.6) { // str = &quot; &quot;; // } else if (g &gt;= 186.6) { // str = &quot;-&quot;; // } else if (g &gt;= 165.5) { // str = &quot;;&quot;; // } else if (g &gt;= 143) { // str = &quot;(&quot;; // } else if (g &gt;= 137.5) { // str = &quot;&lt;&quot;; // } else if (g &gt;= 127.5) { // str = &quot;L&quot;; // } else if (g &gt;= 123.1) { // str = &quot;1&quot;; // } else if (g &gt;= 113.1) { // str = &quot;n&quot;; // } else if (g &gt;= 102) { // str = &quot;s&quot;; // } else if (g &gt;= 85.4) { // str = &quot;h&quot;; // } else if (g &gt;= 75.4) { // str = &quot;4&quot;; // } else if (g &gt;= 69.8) { // str = &quot;e&quot;; // } else if (g &gt;= 62.1) { // str = &quot;5&quot;; // } else if (g &gt;= 51) { // str = &quot;D&quot;; // } else if (g &gt;= 35.5) { // str = &quot;Q&quot;; // } else if (g &gt;= 17.8) { // str = &quot;M&quot;; // } else { // str = &quot;@&quot;; // } if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public static void main(String[] args) { ASCIIConversion nicandrohan = new ASCIIConversion(&quot;nicandrohan&quot;, &quot;png&quot;); nicandrohan.conversion(); } } . .",
            "url": "https://horizon-ab.github.io/congenial-tribble/unit/6",
            "relUrl": "/unit/6",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "JavaScript Testing",
            "content": "Prototyping . JavaScript is an important langauge used for front-end, so here I&#39;ll be doing a bit of testing with it. . Our group project involves rebuilding a website from the ground up, so a lot of the student data has to be displayed somewhere. So I (with a bit of help from my partner) wrote code to display a table. Each student in the table has a name, grade, school, role, and event list. . // define a function to hold data for a Person class Person { constructor(name, grade, school, category) { this.name = name; this.grade = grade; this.school = school; this.role = &quot;&quot;; this.category = category; } // define a setter for role in Person data setRole(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person toJSON() { const obj = { name: this.name, grade: this.grade, school: this.school, role: this.role, category: this.category }; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } } // testing function function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } // make a new Person and assign to variable teacher var instructor = new Person(&quot;Carry P&quot;, 11, &quot;Del Norte High School&quot;, [&quot;Forensics&quot;, &quot;Forestry&quot;]); // object type is easy to work with in JavaScript // output of Object and JSON/string associated with Teacher instructor.setRole(&quot;Instructor&quot;); // set the role var students = [ new Person(&quot;Hugh A&quot;, 11, &quot;Del Norte High School&quot;, [&quot;It&#39;s about Time&quot;, &quot;Anatomy&quot;]), new Person(&quot;Banana B&quot;, 11, &quot;Del Norte High School&quot;, [&quot;Fermi Questions&quot;]), new Person(&quot;Biscuit M&quot;, 11, &quot;Westview High School&quot;, [&quot;Astronomy&quot;]) ]; class SciolyRoster { constructor(instructor, students) { // set instructors instructor.setRole(&quot;Instructor&quot;); this.instructor = instructor; // set students this.students = students; // initiate the array for roster this.roster = [instructor]; // add all students to the array this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.roster.push(student); }); // convert to JSON this.json = []; this.roster.forEach(person =&gt; this.json.push(person.toJSON())); } } roster2021 = new SciolyRoster(instructor, students); SciolyRoster.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid black;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); var body = &quot;&quot;; // set up top row of table body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;School&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Category&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row in roster2021.roster) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + roster2021.roster[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + roster2021.roster[row].grade + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + roster2021.roster[row].school + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + roster2021.roster[row].role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + roster2021.roster[row].category + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;header&gt;2021 Roster&lt;/header&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); } $$.html(roster2021._toHtml()); . 2021 Roster . NameGradeSchoolRoleCategory . Carry P | 11 | Del Norte High School | Instructor | Forensics,Forestry | Hugh A | 11 | Del Norte High School | Student | It&#39;s about Time,Anatomy | Banana B | 11 | Del Norte High School | Student | Fermi Questions | Biscuit M | 11 | Westview High School | Student | Astronomy | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; The Process . Writing all of this code took quite a while as more and more classes were introduced. . I started from the most basic component, a Person. I added the basic attributes like name, grade, school, role, and category. Note how the roles haven&#39;t been specified yet. Next, I created my first specific instructor, using the setRole() method to give the specific role of &quot;instructor&quot;. Instructors have special roles to play so they are distinct from students, which I made next in a list. Combining both the instructor and students, I created the SciolyRoster class which is going to be used to create the table. . The table mainly using a function _toHtml() which required manually typing in each line that would be used to create the table along with filling each row in with the data from the SciolyRoster class. At the end, it returned the html code to create the table, and when called by $$.html, it automatically converted it into a real html table. . &lt;/div&gt; . .",
            "url": "https://horizon-ab.github.io/congenial-tribble/pbl/2022/09/25/javascripttesting.html",
            "relUrl": "/pbl/2022/09/25/javascripttesting.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Class running Fibonacci",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result long executionTime; /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { final long startTime = System.nanoTime(); this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); this.executionTime = System.nanoTime() - startTime; } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } System.out.println(&quot;Init method runtime = &quot; + this.executionTime); } // HACKS START HERE // For-loop implementation public class usingFor extends Fibo { public usingFor() { super(20); } public usingFor(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;For&quot;; long[] numbers = {0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(numbers[0]); numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; } this.executionTime = System.nanoTime() - startTime; } } // While-loop implementation public class usingWhile extends Fibo { public usingWhile() { super(20); } public usingWhile(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;While&quot;; long[] numbers = {0, 1}; int i = 0; while (i &lt; this.size) { this.setData(numbers[0]); numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; i++; } this.executionTime = System.nanoTime() - startTime; } } // Recursion impelmentation public class usingRecursion extends Fibo { public usingRecursion() { super(20); } public usingRecursion(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;Recursion&quot;; int counter = 0; long[] numbers = {0, 1}; increment(numbers, counter); this.executionTime = System.nanoTime() - startTime; } public void increment(long[] numbers, int counter) { this.setData(numbers[0]); if (counter &lt; this.size - 1) { numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; increment(numbers, counter + 1); } } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ public static void main(String[] args) { Fibo fib = new Fibo(); fib.print(); Fibo.usingFor test1 = fib.new usingFor(); test1.print(); Fibo.usingWhile test2 = fib.new usingWhile(); test2.print(); Fibo.usingRecursion test3 = fib.new usingRecursion(); test3.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 39541 Init method = For fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 12208 Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 11458 Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 11875 . Hacks . Objective of Hacks is to produce the Fibonacci sequence in multiple ways. See this runtime. The method provided is Stream, the objective is to produce more familiar methods like ...- For Loop . While Loop | Recursion The trick is to produce all these methods without reproducing the same lines of code. Try to store and capture result data from parent class. | Read the comments of the code in this Blog, as the code instructs you on what to abstract. | . In Blog or code, comment on how this assignment fulfills the following standards from College Board. . Skill 1.B:Determine code that would be used to complete code segments (ie For, While, Recursion)- Skill 4.C: Determine if two or more code segments yield equivalent results (be sure to Discuss how you know results are the same) | Skill 5.A: Describe the behavior of a given segment of program code (describe the difference in recursion versus for &amp; while loops, perhaps add timing to determine speed) | . Personal Hacks: Lesson 5 . The previous algorithm already showed how to make the Fibonacci sequence using a Stream algorithm. However, there are numerous other ways to make the fibonacci sequence, whether it be through for-loops, while-loops, or recursion. . To avoid rewriting code, I put all of my hacks in the previous code cell, so I could access the attributes and methods already created in Fibo, making everything a lot easier to implement. Things like the hashmap along with the setData() function made everything a lot simpler. . Note that I did edit the print section to output the execution time, but I&#39;ll get into why I did that in this next section. . College Board Standards . Skill 1.B: For this particular problem, I created three different implementations (alongside the premade one). Using for-loops and while-loops had pretty similar implementations. Both had a line at the top that handled the iteration, and in the case of the while-loop, I just needed to increment the counter at the bottom (whereas the for-loop was automatic). For Recursion, I had to call a function over and over again with a counter that incremented with each call of the function to make sure the sequence stopped at the right number. | Skill 4.C: The Stream, For-loop, While-loop, and Recursion implementations of the Fibonacci sequence all yield the same results. I can tell this by comparing the printed results from each method - all of them are exactly the same (save for the names of the init method used). | Skill 5.A: For the most part, it appears that, For-loop, While-loop, and Recursion implementations take roughly the same amount of time, hovering around ~13500 nanoseconds of execution time. However, the Stream method seems to take significantly more amounts of time, spending 324375 nanoseconds, which is about 24 times longer than the previous implementations mentioned. In order to find these numbers, I used System.nanoTime(), which basically returns the System time in nanoseconds. Simply subtracting the difference between the start and end implementation allowed me to determine how long it took for each method to run. | .",
            "url": "https://horizon-ab.github.io/congenial-tribble/unit/5",
            "relUrl": "/unit/5",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "FRQ 1 Practice",
            "content": "The First FRQ . The first FRQ primarily focuses around methods and control structures, which isn&#39;t too bad as far as I&#39;m concerned. Methods are about the specific functions an object can perform, whereas control structures are mainly about the if, elseif, and else statemements that can branch a program out into different pathways. These are quite fundamental concepts for the Java language, so I think I know them pretty well already. . However, it&#39;s never a good idea to underestimate the difficulty of these questions, as these can easily make or break a 5 on the exam. That&#39;s why I&#39;ll be practicing them today in this blog. . 2021 . This FRQ is really annoying to put in, so I&#39;ll just link it here . The code block below has my work for both part a and b, with an additional main() function to test solutions (which is not there on the exam unfortunately). . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ public WordMatch(String word) { /* implementation not shown */ this.secret = word; } /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ // START OF SOLUTION A public int scoreGuess(String guess) { // Tracks number of times the substring appears int occurrences = 0; // secret.length() - guess.length() to avoid index overflow with substring later on for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { // Checks if the substring is equal to the guess if (secret.substring(i, i + guess.length()).contains(guess)) { occurrences++; // Moves forward by guess.length() - 1 to move forward in the string (and avoid repeats) // -1 is included because i++ i += guess.length() - 1; } } return occurrences * guess.length() * guess.length(); } // END OF SOLUTION A // START OF SOLUTION B public String findBetterGuess(String guess1, String guess2) { /* to be implemented in part (b) */ if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } else if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } else if (guess1.compareTo(guess2) &gt; 0) { return guess1; } else { return guess2; } } // END OF SOLUTION B public static void main(String[] args) { WordMatch testA = new WordMatch(&quot;mississippi&quot;); System.out.println(testA.scoreGuess(&quot;issippi&quot;)); System.out.println(testA.scoreGuess(&quot;mississippi&quot;)); WordMatch testB = new WordMatch(&quot;concatenation&quot;); System.out.println(testB.findBetterGuess(&quot;ten&quot; , &quot;nation&quot;)); System.out.println(testB.findBetterGuess(&quot;con&quot;, &quot;cat&quot;)); } } WordMatch.main(null); . 49 121 nation con . The Process . For the first time solving an FRQ, I don&#39;t think it was too bad (although we had a pretty big handicap with being able to test solutions). . The first part wasn&#39;t too hard; the iteration was a bit different but we eventually came upon a solution to our problems. Troubleshooting it was probably the hardest part though. Finding the subtle mistakes that we made in the process was painful, even with the ability to compile. . The second part was pretty easy aside from one part. It was easy enough to compare the two values using the previous scoreGuess() function, but we didn&#39;t know how to compare alphabetically. We were completely stuck and I was even considering using a for loop to iterate through each letter, but eventually I realized that the compareTo() method existed for Strings, and that basically solved the problem. . After completing it, Rohan and I eventually made a more simplified version on Rohan&#39;s version of the blog, especially improving part A. We found part A to be the hardest part of the entire ordeal, so we got to work to find a better solution. Eventually we simplified it down a few lines, so I think we definitely improved on making those kinds of solutions. . Overall, I think we did a decent job. Obviously it isn&#39;t good enough for the AP Exam, but I think we can definitely get the hang of creating solutions like these pretty quickly in the future. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/college%20board/2022/09/15/frq1practice.html",
            "relUrl": "/college%20board/2022/09/15/frq1practice.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Iteration with 2D Array",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ (◕‿◕✿) _⍾_/ ==4== _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Hacks (Mini-lab) . Build you own Jupyter Notebook. Feel free to use any ASCII art of your choice, there are some much better ones here. My little guys were made up out of my head while looking at unicode characters. . Print monkeys horizontally versus vertically. | Build more or entire rhyme for the &quot;Monkey Jumpers&quot; countdown poem | Add names or other properties to the monkeys | . In you notebook, illustrate or answer some of these questions. . Is this program in more of an Imperative Programming Style or OOP style? Explain. Observe variable assignments. | Is each Monkey an object? | Build an where the monkey is an object versus two-dimensional array. This would be leading into Unit 5 requirements. | . | Study loops and zero based counting Study two-dimensional (2D) array references | Explain different way you can access a 2D array | . | . Personal Hacks . Quick fix for horizontal monkeys. Code is (for the most part) copied, but a new function printPoemHorizontal() is added to print the monkeys out horizontally instead of vertically. . Also included full poem . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoemVertical() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public void printPoemHorizontal() { int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt; 0; i--) { System.out.println(i + &quot; little monkeys jumping on the bed&quot;); for (int col = 0; col &lt; monkeys[0].length; col++) { for (int row = 0; row &lt; i; row++) { System.out.print(monkeys[row][col] + &quot; t&quot;); } System.out.println(); } if (i &gt; 1) { System.out.println(&quot;One fell off and bumped his head&quot;); System.out.println(&quot;Mama called the doctor and the doctor said&quot;); System.out.println(&quot; &quot;No more monkeys jumping on the bed! &quot;&quot;); System.out.println(); } else { System.out.println(&quot;He fell off and bumped his head&quot;); System.out.println(&quot;Mama called the doctor and the doctor said&quot;); System.out.println(&quot; &quot;Put those monkeys right to bed! &quot;&quot;); System.out.println(); } } } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoemHorizontal(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . 5 little monkeys jumping on the bed ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ One fell off and bumped his head Mama called the doctor and the doctor said &#34;No more monkeys jumping on the bed!&#34; 4 little monkeys jumping on the bed ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ One fell off and bumped his head Mama called the doctor and the doctor said &#34;No more monkeys jumping on the bed!&#34; 3 little monkeys jumping on the bed ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 One fell off and bumped his head Mama called the doctor and the doctor said &#34;No more monkeys jumping on the bed!&#34; 2 little monkeys jumping on the bed ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ One fell off and bumped his head Mama called the doctor and the doctor said &#34;No more monkeys jumping on the bed!&#34; 1 little monkeys jumping on the bed ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ He fell off and bumped his head Mama called the doctor and the doctor said &#34;Put those monkeys right to bed!&#34; . Backwards!? . Next, this one prints the poem backwards (also copying code from before). . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public void printPoemBackwards() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = 1; i &lt;= monkeyCount; i++) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; i; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 } //out of all the loops, prints finishing messages System.out.println(&quot;Too many monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoemBackwards(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ (◕‿◕✿) _⍾_/ ==4== _/ _ Too many monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Object Orientated Hell . For my final trick, I shall (try) to make an object orientated version of the monkey story. Except it&#39;s not monkeys this time, but dinosaurs getting killed by meteorites. Made (mostly) from scratch, this version will involve creating individual objects, each with a list of strings making up a dino. . import java.util.ArrayList; public class Dinos { // Stores all the dinos private static ArrayList&lt;String[]&gt; dinoList = new ArrayList&lt;String[]&gt;(); // Stores individual dino for each object private String[] dino; public Dinos(String[] dino) { this.dino = dino; dinoList.add(dino); } // Prints poem public static void printPoem() { int dinoCount = dinoList.size(); for (int i = dinoCount; i &gt; 0; i--) { System.out.println(i + &quot; dinos strolling around&quot;); for (int col = 0; col &lt; dinoList.get(0).length; col++) { for (int row = 0; row &lt; i; row++) { System.out.print(dinoList.get(row)[col] + &quot; t&quot;); } System.out.println(); } if (i &gt; 1) { System.out.println(&quot;A meteor came down and bumped a head&quot;); System.out.println(&quot;Uh Oh!&quot;); System.out.println(&quot;Now one is dead!&quot;); System.out.println(); } else { System.out.println(&quot;A meteor came down and bumped a head&quot;); System.out.println(&quot;Uh Oh!&quot;); System.out.println(&quot;Now all are dead!&quot;); System.out.println(); } } } // Prints individual dino of specific object public void printDino() { for (String bodyPart : this.dino) { System.out.println(bodyPart); } } // Two methods to get rid of monkey - by default gets rid of last one, with argument it removes at specified index public static void removeDino() { dinoList.remove(dinoList.size() - 1); } public static void removeDino(int i) { dinoList.remove(i); } public static void main(String[] args) { Dinos dino0 = new Dinos(new String[]{ &quot; __ &quot;, &quot; / _)&quot;, &quot; _/ / / _/ /&quot;, &quot; _| / &quot;, &quot; _| ( | ( | &quot;, &quot; /__.-&#39;|_|--|_| &quot;, &quot; Jimmy &quot; }); Dinos dino1 = new Dinos(new String[]{ &quot; __ &quot;, &quot; / _)&quot;, &quot; _.-._/ / &quot;, &quot; _| / &quot;, &quot; _| ( | ( | &quot;, &quot; /__.-&#39;|_|--|_| &quot;, &quot; Jeremy &quot; }); Dinos dino2 = new Dinos(new String[]{ &quot; __ &quot;, &quot; / _)&quot;, &quot; _/ / / _/ /&quot;, &quot; _| / &quot;, &quot; _| ( | ( | &quot;, &quot; /__.-&#39;|_|--|_| &quot;, &quot; Johnny &quot; }); Dinos dino3 = new Dinos(new String[]{ &quot; __ &quot;, &quot; / _)&quot;, &quot; _.-._/ / &quot;, &quot; _| / &quot;, &quot; _| ( | ( | &quot;, &quot; /__.-&#39;|_|--|_| &quot;, &quot; Jackson &quot; }); Dinos dino4 = new Dinos(new String[]{ &quot; __ &quot;, &quot; / _)&quot;, &quot; _/ / / _/ /&quot;, &quot; _| / &quot;, &quot; _| ( | ( | &quot;, &quot; /__.-&#39;|_|--|_| &quot;, &quot; James &quot; }); Dinos.printPoem(); } } Dinos.main(null); . 5 dinos strolling around __ __ __ __ __ / _) / _) / _) / _) / _) _/ / / _/ / _.-._/ / _/ / / _/ / _.-._/ / _/ / / _/ / _| / _| / _| / _| / _| / _| ( | ( | _| ( | ( | _| ( | ( | _| ( | ( | _| ( | ( | /__.-&#39;|_|--|_| /__.-&#39;|_|--|_| /__.-&#39;|_|--|_| /__.-&#39;|_|--|_| /__.-&#39;|_|--|_| Jimmy Jeremy Johnny Jackson James A meteor came down and bumped a head Uh Oh! Now one is dead! 4 dinos strolling around __ __ __ __ / _) / _) / _) / _) _/ / / _/ / _.-._/ / _/ / / _/ / _.-._/ / _| / _| / _| / _| / _| ( | ( | _| ( | ( | _| ( | ( | _| ( | ( | /__.-&#39;|_|--|_| /__.-&#39;|_|--|_| /__.-&#39;|_|--|_| /__.-&#39;|_|--|_| Jimmy Jeremy Johnny Jackson A meteor came down and bumped a head Uh Oh! Now one is dead! 3 dinos strolling around __ __ __ / _) / _) / _) _/ / / _/ / _.-._/ / _/ / / _/ / _| / _| / _| / _| ( | ( | _| ( | ( | _| ( | ( | /__.-&#39;|_|--|_| /__.-&#39;|_|--|_| /__.-&#39;|_|--|_| Jimmy Jeremy Johnny A meteor came down and bumped a head Uh Oh! Now one is dead! 2 dinos strolling around __ __ / _) / _) _/ / / _/ / _.-._/ / _| / _| / _| ( | ( | _| ( | ( | /__.-&#39;|_|--|_| /__.-&#39;|_|--|_| Jimmy Jeremy A meteor came down and bumped a head Uh Oh! Now one is dead! 1 dinos strolling around __ / _) _/ / / _/ / _| / _| ( | ( | /__.-&#39;|_|--|_| Jimmy A meteor came down and bumped a head Uh Oh! Now all are dead! . So yeah. . As you can see it&#39;s a pretty cool conversion to a more object-orientated version, alllowing the programmer to add more monkeys pretty easily by creating another object. Although I literally copied and pasted the code to print the actual poem, most of the new stuff comes from the static 2d ArrayList, which adds the monkey from each new instance to it, making it easy to edit. You can also get rid of a monkey at the very end (or at a specific index) and you can print out the individual monkey stored in one of the objects. Pretty efficient in my opinion. . Good job me. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/unit/4",
            "relUrl": "/unit/4",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "The Kinematic Equations",
            "content": "Kinematics . Kinematics deals with motion in a single dimension. Left to right, Up to down, something like that. While it may seem quite restricting right now (after all we live in 3 dimenstions), it’s important to be able to describe a single dimension before describing 3. Fundamentals are important in every field, and physics is no exception. . So in this post, I just want to review 4 key equations that are central to kinematics. . The Kinematic Equations . Below are the 4 essential equations to kinematics (assuming acceleration is constant): . . Let’s go through each of them in order. . This is a pretty basic equation, and quite self-explanatory to say the least. The final velocity of an object is equal to the initial velocity plus the acceleration times time. Well, acceleration times time is just change in velocity. So, adding change in velocity to inital velocity is just final velocity. . | This one’s a bit more complicated, but I’ll try to explain. Taking the average velocity (final plus initial over 2) and multiplying it by the time should yield displacement, because it’s similar to just rearranging the way to calculate area on a velocity graph. Just like how the formula for an arithmetic series works. . | This equation is pretty complicated, but I think I have an idea. Initial velocity times time just represents the bottom rectangle under a velocity graph, while acceleration times time squared divided by 2 just represents the triangle above that (acceleration times time represents change in velocity or the vertical height between initial and final on the graph, time just represents the horizontal length). . | I’m going to be honest, I don’t even know where to start on this one. I’ll probably figure it out later and edit this post. But for now, enjoy this picture of a sloth: . | .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/physics/2022/09/10/kinematicequations.html",
            "relUrl": "/markdown/physics/2022/09/10/kinematicequations.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Living a Good Life",
            "content": "Psychology and the Good Life . . Basically, this video talks about the prevalence of stress and anxiety among students across many colleges and the need to reform their attitudes in order to live a good life. It’s clear that it’s not healthy for so many students to be stressed about going to a good college because they’re missing out on so many of the opportunities that they came there for in the first place. . Personal Experiences and Opinions . Personally, I can relate to some of the feelings that these students go through. I sometimes feel stressed when I have a lot of work to get done, feeling overwhelmed by everything I have to do. But I can’t even imagine what’d it be like to have to experience that all the time. So I do think that it’s necessary to make sure that those students are actually enjoying their lives in college. . In my opinion, living a good life in college would mean being able to pursue everything you want without having to deal with the restrictions that held you back as a child. Although this may come with more responsibilities, you still shouldn’t be weighed down by so much stress and anxiety for your classes. It just makes the college experience a bad memory later in the future, which could also possibly be jeopardized by that bad experience. Suffering mentally can prevent you from taking advantage of all the opportunities available, which could potentially lead to meeting amazing people or finding a dream job. . It’s tragic that so many students could potentially be missing out on so many of these opportunities which could do so much for them later in life. Reforming the college system to ensure that students are working hard AND happy should be a top priority for colleges across the nation. Because, after all, those students will have the biggest impact in the future after college. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/human/2022/09/09/livingagoodlife.html",
            "relUrl": "/markdown/human/2022/09/09/livingagoodlife.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Boolean Expressions and If Statements",
            "content": "Expression, Assignments, and Condition Statements . All of the Units have video series. We have access to information and content for College Board and Code.org. Below are two sample videos, it is up to you to determine the detail or brevity that you will need according to your experience. . AP Classroom Boolean Expressions | Code.org If and Conditions, less than 2 minutes | . Introduction to Boolean expression . A Boolean expression is a logical statement that can be evaluated to True or False. A Boolean expression may be composed of a combination of the Boolean constants true or false. . // All of the boolean expressions below evaluate to true if (true) { System.out.println(&quot;True code block&quot;); } if (true &amp;&amp; !false) { System.out.println(&quot;True and Not False code block&quot;); } if (true || false) { System.out.println(&quot;True or False code block&quot;); } if ((true &amp;&amp; !false) &amp;&amp; (true || false)) { System.out.println(&quot;Confusing code block&quot;); } if (!((false || !true) || (false &amp;&amp; true))) { System.out.println(&quot;De Morgan&#39;s law in my head of confusing code block&quot;); } // Can any of the above expression be simplified? What would they simplify to? Are any of these expressions useful? . True code block True and Not False code block True or False code block Confusing code block De Morgan&#39;s law of confusing code block . Hacks . Build your own Jupyter Notebook lesson on ifs . Explain if, if-else, and if-elseif-else. | Make a markdown block before you sample code | Comment in code to describe each decision | . Add to lesson switch-case . Create and if-elseif-elseif-elseif-else statement, 5 or more conditions. | Covert the 5 or more decisions to a switch-case-case-case-case-otherwise. | Make a markdown block before each code example | Comment/establish a style of comments for your if-elseif and switch-case code blocks | Finish lesson with De Morgan&#39;s law . Describe De Morgan&#39;s law | Illustrate De Morgan&#39;s law | Show some code running that shows understanding | Resources, it is really time to show you can find resources beyond the Teacher. Code/Code/Coding is everywhere, find something that helps. . Code.org Unitt 4 section 1 to 5 can help with some ideas. | AP Classroom unit 3 has outline for unit | CodeAcademy has some online resources | Personal hacks . If Statements . If statements are, in my opinion, at the core of all conditional statements. Essentially, whatever comes inside if statements only runs if the expression inside the if statement evaluates to be true. Otherwise, the code inside will not run and will move on. . If the programmer wants to create other code to run in a false case, then they have the else statement to use in an if-else statement. Else statements only run if the if statement evalulates to false. . If statements can be chained in succession using the if-elseif-else statement. The if and else components work exactly the same, but the elseif part can be thought of as a combination between the two. Elseif only runs if the if (or another elseif) satement before evalulates to false and the expression inside the elseif evalulates to true. These elseif statements can be stacked over and over again to handle all sorts of different cases. . Taken altogether, these three statements can be used to handle every sort of conditional case imaginable. It may be a bit confusing to have it explained on text, but it&#39;s much easier to just use actual code to demonstrate: . public class ifTest { public static void main(String[] args) { int numberOne = 5; // if statement // Since numberOne (5) is greater than 1, then it evaluates to be true and the print statement below runs if (numberOne &gt; 1) { System.out.println(numberOne + &quot; is greater than 1!&quot;); } // if-else statement // Since numberOne (5) is not greater than 9, then it evalulates to be false and then the else portion runs instead of the if if (numberOne &gt; 9) { System.out.println(numberOne + &quot; is greater than 9!&quot;); } else { System.out.println(numberOne + &quot; is not greater than 9!&quot;); } // if-elseif-else statement // numberOne (5) is not equal to 1, so the else-if runs next. Since numberOne (5) is equal to 5, then the code under else-if runs if (numberOne == 1) { System.out.println(&quot;numberOne is equal to 1!&quot;); } else if (numberOne == 5) { System.out.println(&quot;numberOne is equal to 5!&quot;); } else { System.out.println(&quot;I don&#39;t know what numberOne is!&quot;); } } } ifTest.main(null); . 5 is greater than 1! 5 is not greater than 9! numberOne is equal to 5! . A lot of elseif statements . You can see in the below example how a lot of elseif statements can be chained together for something like an if-elseif-elseif-elseif-elseif-else statement. The example below may be quite long, but there are other things you can do to simplify this: . public class elseifStatements { public static void main(String[] args) { String favoriteColor = &quot;green&quot;; if (favoriteColor.equals(&quot;red&quot;)) { System.out.println(&quot;The favorite color is red!&quot;); } else if (favoriteColor.equals(&quot;orange&quot;)) { System.out.println(&quot;The favorite color is orange!&quot;); } else if (favoriteColor.equals(&quot;yellow&quot;)) { System.out.println(&quot;The favorite color is yellow!&quot;); } else if (favoriteColor.equals(&quot;green&quot;)) { System.out.println(&quot;The favorite color is green!&quot;); } else if (favoriteColor.equals(&quot;blue&quot;)) { System.out.println(&quot;The favorite color is blue!&quot;); } else if (favoriteColor.equals(&quot;purple&quot;)) { System.out.println(&quot;The favorite color is purple!&quot;); } else { System.out.println(&quot;I don&#39;t know what the favorite color is!&quot;); } } } elseifStatements.main(null); . The favorite color is green! . Switch Cases . Switch cases are similar to if statements in that they run certain lines of code when certain conditions are true. However, switch cases only run when a prespecified variable is equal to whatever is given in each of the cases. . Why would I use this? Well, they can be more efficient than writing a ton of elseif statements. . This is also a bit confusing to explain through text, so here&#39;s another example (note how break is used to prevent everything below it from running): . public class switchTest { public static void main(String[] args) { String favoriteColor = &quot;green&quot;; switch (favoriteColor) { case &quot;red&quot;: System.out.println(&quot;The favorite color is red!&quot;); break; case &quot;orange&quot;: System.out.println(&quot;The favorite color is orange!&quot;); break; case &quot;yellow&quot;: System.out.println(&quot;The favorite color is yellow!&quot;); break; case &quot;green&quot;: System.out.println(&quot;The favorite color is green!&quot;); break; case &quot;blue&quot;: System.out.println(&quot;The favorite color is blue!&quot;); break; case &quot;purple&quot;: System.out.println(&quot;The favorite color is purple!&quot;); break; default: System.out.println(&quot;I don&#39;t know what the favorite color is!&quot;); } } } switchTest.main(null); . The favorite color is green! . De Morgan&#39;s Law . De Morgan&#39;s Law is a bit more mathematical in nature, dealing with set theory, so I&#39;ll try my best to describe it here. . De Morgan&#39;s Law basically explains how certain boolean statements can be rewritten as different expressions, yet essentially be the same. More specifically, it states that &quot;The complement of the union of two sets is the same as the intersection of their complements&quot; or &quot;The complement of the intersection of two sets is the same as the union of their complements&quot;. . What the heck does that mean? An easier way to think about it would be like this: . not (A or B) = (not A) and (not B) | not (A and B) = (not A) or (not B) | . In a more formalalized, mathematical way: . . But even with all that text, it&#39;s still pretty confusing, right? So it&#39;s probably best to visualize it using an actual image. This one I found online pretty much summarizes it best: . . The green shaded area is basically what&#39;s being covered in each equality. Both sides cover the same thing. . Finally, let&#39;s go through an example of how this would apply in code. Essentially, we&#39;ll use a few variables to make a whole bunch of complicated boolean statements that actually mean the same exact thing: . public class deMorgansLaw { public static void main(String[] args) { boolean a = false; boolean b = true; // These two statements are exactly equal according to De Morgan&#39;s law // In this case, the only way to yield an output of true would be to have both a and b to be false (change it to check) System.out.println(!(a || b)); System.out.println(!a &amp;&amp; !b); boolean c = true; boolean d = false; // These two statements are also exactly equal according to De Morgan&#39;s Law // In this case, the only way to yield an output of false would be to have both c and d to be true (change it to check) System.out.println(!(c &amp;&amp; d)); System.out.println(!c || !d); } } deMorgansLaw.main(null); . false false true true . Conclusion . If statements, elseif statements, and else statmenet are the most basic components of conditionals, and thus are essential for any programmer to understand. They allow programs to run different lines of codes depending on given conditions, letting a program do various things when run multiple times. . Switch statements are similar to if statements, but are more tailored towards testing a single variable. However, they can be more efficient than branching many if and elseif statements. . De Morgan&#39;s Law describes the more mathematical complexities of if statements, explaining how certain conditions are actually equal to certain others. These can allow a programmer to rewrite their code or reexamine how it works. . Overall, knowing all of these things can be super helpful in one&#39;s journey as a programmer. To finish things off, I made a simple guessing number game below, applying conditionals to check victory, defeat, and more. . import java.util.*; public class guessANumber { public static void main(String[] args) { Scanner input; int guessNumber = 0; int guesses = 5; int secretNumber = (int)((Math.random() * 100) + 1); while (true) { input = new Scanner(System.in); System.out.println(&quot;You have &quot; + guesses + &quot; guesses left!&quot;); System.out.println(&quot;Guess a number (1-100): &quot;); guessNumber = input.nextInt(); input.close(); if (guessNumber == secretNumber) { System.out.println(&quot;You guessed it! The secret number was &quot; + secretNumber + &quot;!&quot;); break; } else if (guessNumber &gt; secretNumber) { System.out.println(guessNumber + &quot; is too high!&quot;); guesses--; } else if (guessNumber &lt; secretNumber) { System.out.println(guessNumber + &quot; is too low!&quot;); guesses--; } if (guesses &lt;= 0) { System.out.println(&quot;You lose! The secret number was &quot; + secretNumber + &quot;!&quot;); break; } } } } guessANumber.main(null); . You have 5 guesses left! Guess a number (1-100): 50 is too low! You have 4 guesses left! Guess a number (1-100): 75 is too high! You have 3 guesses left! Guess a number (1-100): 63 is too low! You have 2 guesses left! Guess a number (1-100): 70 is too high! You have 1 guesses left! Guess a number (1-100): You guessed it! The secret number was 66! .",
            "url": "https://horizon-ab.github.io/congenial-tribble/pbl/2022/09/06/booleansandifs.html",
            "relUrl": "/pbl/2022/09/06/booleansandifs.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Trajectory Calculator - Key Code Requirements",
            "content": "Using Math class . TrajectoryCalculator class utilizes the Math class in order to perform operations to find the equation. . More specifically, it uses Math.pow(), Math.cos(), Math.tan(), and Math.PI. . // The line below isn&#39;t necessary in Jupyter Notebook //package com.hacks.trajectoryCalculator; import org.jfree.data.function.Function2D; /* * Actual math for calculating trajectory * * Calculates equation as a string * * Returns equation * */ public class TrajectoryMath implements Function2D { // Initialize variables private double velocity; private double degrees; private double height; private String equation; private double coefficientA; private double coefficientB; private double coefficientC; // Constructor public TrajectoryMath(double velocity, double degrees, double height) { this.velocity = velocity; this.degrees = degrees; this.height = height; this.calculateEquation(); } // Getters and setters public double getVelocity() { return this.velocity; } public double getDegrees() { return this.degrees; } public double getHeight() { return this.height; } public String getEquation() { return this.equation; } public double getCoefficientA() { return this.coefficientA; } public double getCoefficientB() { return this.coefficientB; } public double getCoefficientC() { return this.coefficientC; } // Gets the root of the equation // There should be only one positive root, so the method will return that and discard the other // Returns 0.0 if none is found (which shouldn&#39;t happen usually) public double getRoot() { double rootOne = (-this.coefficientB + Math.sqrt(Math.pow(coefficientB, 2) - 4 * (-this.coefficientC) * this.coefficientA)) / (2 * (-this.coefficientC)); double rootTwo = (-this.coefficientB - Math.sqrt(Math.pow(coefficientB, 2) - 4 * (-this.coefficientC) * this.coefficientA)) / (2 * (-this.coefficientC)); if (rootOne &gt; 0) { return rootOne; } else if (rootTwo &gt; 0) { return rootTwo; } else { return 0.0; } } public void setVelocity(double velocity) { this.velocity = velocity; } public void setDegrees(double degrees) { this.degrees = degrees; } public void setHeight(double height) { this.height = height; } // Array should be in order of velocity, degrees, and height public void setParameters(double[] values) { this.velocity = values[0]; this.degrees = values[1]; this.height = values[2]; } // Math for equation private void calculateEquation() { // Calculates coefficients for each part this.coefficientA = height; this.coefficientB = Math.tan(degrees * Math.PI/180); this.coefficientC = 9.8 / (2 * Math.pow(velocity, 2) * Math.pow(Math.cos(degrees * Math.PI/180), 2)); // Makes string of equation just in case String precheckedEquation = &quot;y = &quot; + String.valueOf(coefficientA) + &quot; + &quot; + String.valueOf(coefficientB) + &quot;x - &quot; + String.valueOf(coefficientC) + &quot;x^2&quot;; this.equation = precheckedEquation; } // Returns equation public double getValue(double v) { return coefficientA + coefficientB * v - coefficientC * Math.pow(v, 2); } /* * public static void main(String[] args) { TrajectoryMath example = new TrajectoryMath(15, 60, 4); System.out.println(example.getRoot()); } */ } . Using GUI . InputInitial creates the prompt for the user to enter inputs. . TrajectoryGraph outputs the graph for the user to visualize. . // Below line is unnecessary //package com.hacks.trajectoryCalculator; import javax.swing.JOptionPane; // library to display options import javax.swing.JTextField; // library to create a text field to render on GUI public class InputInitial { // instance variables to be used public static Double initialVelocity; public static Double initialDegrees; public static Double initialHeight; // create the GUI element that users input into public void spawnInputs() { // while the values have not changed yet, keep going (for error handling) while (initialVelocity == null || initialDegrees == null || initialHeight == null) { // text field initialization JTextField inputVelocity = new JTextField(); JTextField inputDegrees = new JTextField(); JTextField inputHeight = new JTextField(); // organizing the input text to display + the text field in object Object[] inputs = { &quot;Initial Velocity (m/s):&quot;, inputVelocity, &quot;Initial Degrees:&quot;, inputDegrees, &quot;Initial Height (m):&quot;, inputHeight }; JOptionPane.showConfirmDialog(null, inputs, &quot;Input the initial values for your object (numbers only):&quot;, JOptionPane.OK_CANCEL_OPTION); // creates the option menu with the 3 inputs // take the input, assign it to the public variables initialVelocity = parseInput(inputVelocity); initialDegrees = parseInput(inputDegrees); initialHeight = parseInput(inputHeight); } } // change JTextField into Double, also error handling public Double parseInput(JTextField inputValue) { String placeholder = inputValue.getText(); // get the string out of the input // error handling + edge cases try { double initialValue = Double.parseDouble(placeholder); // if negative, cannot be valid so throw error --&gt; reinput values bc still null if (initialValue &lt; 0.0) { JOptionPane.showMessageDialog(null, &quot;Inputs must be greater than 0&quot;, &quot;Invalid Input&quot;, JOptionPane.WARNING_MESSAGE); return null; } else { // if everything ok, return the value return initialValue; } } catch (Exception e) { // if cannot be cased as a double, throw error --&gt; reinput values JOptionPane.showMessageDialog(null, &quot;There was an invalid input for &quot; + placeholder + &quot;, please try again. &quot; + e, &quot;Unwanted Input&quot;, JOptionPane.WARNING_MESSAGE); return null; } } } . // Below line is unnecessary // package com.hacks.trajectoryCalculator; // maven build // import the graphs import org.jfree.data.function.Function2D; import org.jfree.data.general.*; import org.jfree.chart.ChartFactory; import org.jfree.chart.ChartPanel; import org.jfree.chart.JFreeChart; import org.jfree.chart.plot.PlotOrientation; import org.jfree.data.xy.XYDataset; // import the other files import com.hacks.trajectoryCalculator.*; // import swing and awt import javax.swing.JFrame; import java.awt.Dimension; public class TrajectoryGraph extends JFrame { // Constructor of the graph that will be displayed public TrajectoryGraph() { InputInitial newInputs = new InputInitial(); // start input object from separate file newInputs.spawnInputs(); // start the process of collecting user input drawGraph(InputInitial.initialVelocity, InputInitial.initialDegrees, InputInitial.initialHeight); // call method to draw the graph with the user input taken } // graph drawer public void drawGraph(double velocity, double degrees, double height) { Function2D test = new TrajectoryMath(velocity, degrees, height); // TrajectoryMath implements function2d, so use those values create new function2d object TrajectoryMath testGetter = new TrajectoryMath(velocity, degrees, height); // creates TrajectoryMath object from the other file to call custom methods XYDataset dataset = DatasetUtils.sampleFunction2D(test, 0.0, testGetter.getRoot(), 50, &quot;Function&quot;); // generates the dataset of xy values with the function final JFreeChart chart = ChartFactory.createXYLineChart(&quot;Trajectory Equation&quot;, &quot;X Position (meters)&quot;, &quot;Y Position (meters)&quot;, dataset, PlotOrientation.VERTICAL, true, true, false); // creates the actual graph with attributes // initializing the display ChartPanel cp = new ChartPanel(chart) { @Override public Dimension getPreferredSize() { return new Dimension(500, 500); // set initial dimension } }; // allow mouse wheel scrolling cp.setMouseWheelEnabled(true); add(cp); // Finalize the building of the graph setDefaultCloseOperation(EXIT_ON_CLOSE); pack(); } public static void main(String[] args) { // runs the creation of the graph with a queue in a different thread and posts the gui after events are processed java.awt.EventQueue.invokeLater(new Runnable() { @Override public void run() { // initialize new TrajectoryGraph object, setvisible to display the graph new TrajectoryGraph().setVisible(true); } }); } } .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/09/05/trajectorykeycode.html",
            "relUrl": "/2022/09/05/trajectorykeycode.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "The Trajectory Calculator",
            "content": "The Trajectory Calculator . As my teamate (Andrew Meng) and I were wondering what to create for our GUI project, we eventually stumbled into the realm of physics. Originally, we wanted to create a kinematics simulator, but we soon realized how hard that would actually be. Apparently, real time updates take a lot of effort to implement. . Our next idea would be the one we chose - a trajectory calculator. The idea was simple: ask the user for inputs on velocity, angle, and height and the program would output a graph of the trajectory of the object. So, we soon got to work on implementing it. . Bailey’s Part . My part in creating it centered around the fundamental part of the idea - the mathematics. I realized that a class had to be made to handle all of the mathematical operations behind the trajectory, so I created TrajectoryMath.java to take care of all of that. . TrajectoryMath takes in parameters of velocity, degrees, and height to perform all of the calculations. Once the object is created, it’s able to return the equation in double or String format, the positive root (when the equation is equal to 0), and each of the coefficients for the equation. . Without this mathematical framework, the graph wouldn’t be able to output anything useful at all. . Andrew’s Part . Andrew’s part in creating it centered around the GUI portion of the process, making it interactive so that a user could input values and have the program spit out a graph as the output. He created two files, InputInitial.java and TrajectoryGraph.java to handle the inputs and graphing respectively. . InputInitial essentially creates a prompt for the user to input the velocity, degrees, and height for the equation. It also takes care of error handling with faulty inputs. . TrajectoryGraph is probably the central file of the entire operation, as it runs the entire program. It creates an object of the InputInitial class to get the inputs, and takes each of those inputs as parameters for the drawGraph() method. This method creates an object of the TrajectoryMath class to deal with the math and then takes values from that and uses it as inputs to create a graph using JFrame. . Without this interactive structure, the user wouldn’t even be able to input and see anything at all. . Conclusion . This project was a lot bigger than expected, and we ran into quite a few problems along the way. But I found it very fun to create a big project that actually has a cool purpose. I also really felt that I grew a lot during this project, as it was a new experience to deal with multiple Java files and complicated packages. Overall, it was a fun experience. . .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/pbl/2022/09/05/trajectorycalculator.html",
            "relUrl": "/markdown/pbl/2022/09/05/trajectorycalculator.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "AP CSA Log 3 - Arrays",
            "content": "Arrays . Arrays are an important structure to understand, as they appear on the AP Exam as one of the FRQs. But, what exactly are arrays in Java? . Definition . Arrays can store multiples values of a datatype, indicated by the form: . “type[] arrayName;” . Various values can be stored within, making it a useful tool to handle large amounts of data. . For and while loops . Arrays can also be transversed, iterated, and mutated through for and while loops. Using these loops, each element inside the array can be accessed and/or changed somehow. It’s way easier than just using a million variables and going through each one. . To access each value, simply use the square brackets along with the index (which starts from 0). An example of accessing something at index 2 would like like this . “arrayOfNumbers[2];” . Conclusion . Arrays are useful for handling large amounts of data neatly. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/college%20board/2022/09/05/csalog3.html",
            "relUrl": "/markdown/college%20board/2022/09/05/csalog3.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Using Java Objects",
            "content": "Console Based Menu . Java imports allow user input and console output to be displayed in Terminal . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | . Other College Board Topics . A 2D array is used to store COLORS | A Control Structure, Switch, is used to process Menu select to code that performs related action | . Key PBL Topic . Menu class when instantiated with new Menu() takes over Frontend experience with user. This is relevant to Draw Lab in this article and how Spring Boot works in Web programming. Objects are intended to encapsulate Frontend, Backend or experience ... Web Site control flow, Database CRUD operations, or a Menu in terminal (this example) | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 30; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: System.out.println(&quot;Macro monkeys&quot;); default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 1: Hello, World! 2: DefaultRedGreenYellowBluePurpleCyanWhite 3: Loading...############################## 0: Goodbye, World! . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Using Objects . Javax Swing UI (JFrame) | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . Code.org Object Oriented Programming - The Neighborhood . Students learn fundamental Java concepts as they navigate and interact with The Neighborhood with Painter objects and create new types of Painters to expand the capabilities of their programs. . College Board Topics . Inheritance (extends) is introduced early in this activity | Conditional statements, While loops, and Boolean expressions | . Using Objects . Code.org Painter class and objects | . Activity Page Start: Code.org CSA1 . Hacks . College Board and CTE competences. . Documentation / Analysis. Describe with Markdown Cell(s) and triple backtick code fragments that answers to the following from your work... Explain where a Class is defined | Explain where an instances of a Class is defined | Explain where an object is Calling a Method | Explain where an object is Mutating data | Describe Console, GUI differences, or Code.org differences. | . | Exploration work Build a new Console or GUI lab for your own solution of interest, this is great opportunity to visualize data from Math, Physics, or other class using Math library. Look to make these changes in your work Make constructors of different signatures. | Use Wrapper Classes of Integer and Double for defining object instance or static data in the Class | Use the Math Class in performing calculations | . | Code.org learning Follow the Neighborhood lessons and work through the OOP Unit. | . Documentation/Analysis Hacks . Classes are usually defined at the very top of a java program, encapsulating basically everything. . Instances of classes (objects) are defined like so: &quot;Class object = new Class()&quot;, usually in main(). . Objects call methods using the dot operator (&quot;.&quot;), usually in main() as well. . // Class is defined here public class Test { public int number; public String word; public Test(int number, String word) { this.number = number; this.word = word; } public void talk() { System.out.println(this.word); } public static void main(String[] args) { // Class instance is defined here Test objectOne = new Test(17, &quot;Hello&quot;); // Object method is called here objectOne.talk(); // Object is mutating data here objectOne.number = 42; } } Test.main(null); . Hello . Console vs. GUI vs. Code.org . Consoles, GUIs, and Code.org are all places that code can be run, but each are very distinct and have different purposes. . Consoles such as terminal are probably the lowest level place to run code from, and thus they can have the most direct impacts on files in the computer. However, one downside is that everything is pretty much barebones since only ASCII characters can be displayed. Users can still enter inputs and receive outputs, but it&#39;s not very user friendly. Its main purpose is for developers and programmers to have a wider control over the machine they&#39;re using. . GUIs such as the browsers we use (Chrome, Edge, Bing, etc.) can be found in nearly every single device we use. They&#39;re quite user friendly and very clear, making it very convinient to use to perform certain tasks. However, it does come at the downside of being somewhat limited in its functionality. The GUIs have to simplify everything to give the user a good experience, but that also means certain things have to be left out. Its main purpose is to give users an easy experience to perform specific tasks. . Code.org seems to take aspects from both consoles and GUIs in that it requires specific commands to run just like consoles, but it&#39;s also quite user friendly in compiling and creating tangible output just like GUIs. Its main purpose is to teach people how to program, so I guess it&#39;s perfectly fine in taking aspects from both consoles and GUIs. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/09/04/usingobjects.html",
            "relUrl": "/2022/09/04/usingobjects.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Using Objects",
            "content": "Console Based Menu . Java imports allow user input and console output to be displayed in Terminal . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | . Other College Board Topics . A 2D array is used to store COLORS | A Control Structure, Switch, is used to process Menu select to code that performs related action | . Key PBL Topic . Menu class when instantiated with new Menu() takes over Frontend experience with user. This is relevant to Draw Lab in this article and how Spring Boot works in Web programming. Objects are intended to encapsulate Frontend, Backend or experience ... Web Site control flow, Database CRUD operations, or a Menu in terminal (this example) | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 30; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: System.out.println(&quot;Macro monkeys&quot;); default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 1: Hello, World! 2: DefaultRedGreenYellowBluePurpleCyanWhite 3: Loading...############################## 0: Goodbye, World! . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Using Objects . Javax Swing UI (JFrame) | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . Code.org Object Oriented Programming - The Neighborhood . Students learn fundamental Java concepts as they navigate and interact with The Neighborhood with Painter objects and create new types of Painters to expand the capabilities of their programs. . College Board Topics . Inheritance (extends) is introduced early in this activity | Conditional statements, While loops, and Boolean expressions | . Using Objects . Code.org Painter class and objects | . Activity Page Start: Code.org CSA1 . Hacks . College Board and CTE competences. . Documentation / Analysis. Describe with Markdown Cell(s) and triple backtick code fragments that answers to the following from your work... Explain where a Class is defined | Explain where an instances of a Class is defined | Explain where an object is Calling a Method | Explain where an object is Mutating data | Describe Console, GUI differences, or Code.org differences. | . | Exploration work Build a new Console or GUI lab for your own solution of interest, this is great opportunity to visualize data from Math, Physics, or other class using Math library. Look to make these changes in your work Make constructors of different signatures. | Use Wrapper Classes of Integer and Double for defining object instance or static data in the Class | Use the Math Class in performing calculations | . | Code.org learning Follow the Neighborhood lessons and work through the OOP Unit. | . Documentation/Analysis Hacks . Classes are usually defined at the very top of a java program, encapsulating basically everything. . Instances of classes (objects) are defined like so: &quot;Class object = new Class()&quot;, usually in main(). . Objects call methods using the dot operator (&quot;.&quot;), usually in main() as well. . // Class is defined here public class Test { public int number; public String word; public Test(int number, String word) { this.number = number; this.word = word; } public void talk() { System.out.println(this.word); } public static void main(String[] args) { // Class instance is defined here Test objectOne = new Test(17, &quot;Hello&quot;); // Object method is called here objectOne.talk(); // Object is mutating data here objectOne.number = 42; } } Test.main(null); . Hello . Console vs. GUI vs. Code.org . Consoles, GUIs, and Code.org are all places that code can be run, but each are very distinct and have different purposes. . Consoles such as terminal are probably the lowest level place to run code from, and thus they can have the most direct impacts on files in the computer. However, one downside is that everything is pretty much barebones since only ASCII characters can be displayed. Users can still enter inputs and receive outputs, but it&#39;s not very user friendly. Its main purpose is for developers and programmers to have a wider control over the machine they&#39;re using. . GUIs such as the browsers we use (Chrome, Edge, Bing, etc.) can be found in nearly every single device we use. They&#39;re quite user friendly and very clear, making it very convinient to use to perform certain tasks. However, it does come at the downside of being somewhat limited in its functionality. The GUIs have to simplify everything to give the user a good experience, but that also means certain things have to be left out. Its main purpose is to give users an easy experience to perform specific tasks. . Code.org seems to take aspects from both consoles and GUIs in that it requires specific commands to run just like consoles, but it&#39;s also quite user friendly in compiling and creating tangible output just like GUIs. Its main purpose is to teach people how to program, so I guess it&#39;s perfectly fine in taking aspects from both consoles and GUIs. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/pbl/2022/09/04/usingjavaobjects.html",
            "relUrl": "/pbl/2022/09/04/usingjavaobjects.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "My Journey",
            "content": "My Journey . Programming has always been quite a large part of my life. For a while, I never really thought about why. So that’s why I want to take a look back from the start. . The Beginning . I think I’ve always been interested in programming for as long as I could remember. My dad was a software engineer at HP, so if I had to say, my passion probably came from him. It was fun watching him type up copius amounts of code (which he still does), many parts of which I still wouldn’t understand to this day. . Block Coding . Like many others, my first real experience with programming probably came from block coding from sites such as code.org (hour of code) and Scratch. But it’s very common for a good reason. Block coding can easily teach the fundamentals of programming without the difficult learning curve of syntax. I still remember all the puzzles where I had to get my character (like Steve from Minecraft) to move somewhere and do something (like attack with a sword). . . Python . The first actual language I learned was Python on a site called Codecademy. Python was and still is a pretty good choice for beginners, due to its very forgiving syntax (although why would any language use indent as part of its syntax). There are (usually) no annoying methods or functions I need to know to do basic things and a lot of the processes are automatically performed by the compiler. However, due to it being a high-level language, efficiency is a lot lower than other languages. Plus, there was no reason to use its object-orientated programming syntax over other languages like C++ and Java. . C++ . C++ was quite a challenge to learn, as it was the first object-orientated language I tried to fully learn (I gave up on Java earlier). Learning how classes and objects operated was quite different from what I normally used in languages like Python, but it was well worth it. Knowing how to use objects and classes can be very powerful, as they basically allow anyone to create their own variable with custom properties. (I also “learned” how to use pointers, which can be its own topic). . . Today . Today, I am still code code coding in APCSA, picking up old things and learning new things. I’ve picked Java back up again as the main language we use (more successfully with my knowledge of C++) and I’ve learned how to use sites like GitHub, which can be useful for making huge projects with many collaborators. . Where To? . Obviously, my journey is still ongoing. I still have plans for other avenues, which I’ll probably start working on soon. Even though it’s been a long time since I’ve started programming, I still feel that I barely know anything, which is a good thing. Knowing less means that there’s more to learn. With all the time in the world, I’ll continue to grow as a programmer and maybe make some super cool things. . For now, I’ll just keep working on Java and Github though. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/2022/09/03/myjourney.html",
            "relUrl": "/markdown/2022/09/03/myjourney.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Code.org learning",
            "content": "Code.org Unit 1 . Code.org taught me a lot of useful things about object-orientated programming, specifically with the java language. It’s especially important to go over the creation and use of objects along with the inheritance of classes. . Objects . Objects are the main feature of java, and they represent instances of a class (a blueprint for these objects). Objects are unique in the way that they can have their own attributes and methods, allowing the programmer who makes the class to tailor their objects to certain specifications. By calling their methods (with the dot operator), a programmer can use objects to perform tasks. . Here’s an example of using an object to paint certain things in code.org: Note how the object is established with “PainterPlus myPainterPlus = new PainterPlus();” and how it accesses its methods such as myPainter.moveFast(); . Inheritance . One cool feature about classes in java is that class can inherit certain properties and methods from other classes. Members of the child class are able to access the same attributes and methods of the parent class, in the same way for both. Through this, programmers can create a very general parent class as a blueprint for more specific classes detailing attributes and methods specific to that class, while keeping the essential attributes and methods of the original. . Here’s an example of a class, PainterPlus, inheriting from the class Painter in code.org: Note how the class declaration of PainterPlus includes the “extends” keyword in order to inherit from Painter. . Here’s an example of how PainterPlus can use methods from both classes in code.org: Note how .move() is a method of Painter, while .turnRight() is a method exclusive to PainterPlus. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/pbl/2022/08/30/codeorg.html",
            "relUrl": "/markdown/pbl/2022/08/30/codeorg.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Vectors vs. Scalars",
            "content": "Vectors vs. Scalars . AP Physics is quite a daunting class, so it’s good to make note of the very important differences between certain concepts. Vectors and scalars are basically present in every single measurement taken in that class, so I think it’d be a good idea to distinguish between the two here. . Vectors . Vectors are magnitude + direction. . It describes a quantity that is in a certain direction. Examples include velocity and acceleration. . Scalars . Scalars are magnitude. . It describes a quantity that cannot be measured with a certain direction in mind. Examples include length and time. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/physics/2022/08/27/vectorsandscalars.html",
            "relUrl": "/markdown/physics/2022/08/27/vectorsandscalars.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "AP CSA Log 2 - The AP Exam",
            "content": "The AP Computer Science A Exam . This exam will basically determine if I get credit for this class or not, so it’s good to see how this test is actually broken down. . The exam lasts a total of 3 hours, and is broken into two portions: . Multiple Choice | Free Response | . Multiple Choice . The multiple choice segment, as its name suggests, is a bunch of multiple choice questions (40 in total) about programming. It’s worth 50% of the total exam, lasting for 1 hour and 30 minutes. The questions are usually individual, though 1 or 2 sets will appear (which have 2 questions). . Free Response . The free response segment consists of 4 questions about code implementation: . Question 1 deals with methods and control structures | Question 2 deals with classes | Question 3 deals with arrays and arraylists | Question 4 deals with 2d arrays | . This section also is worth 50% of the exam and lasts 1 hour and 30 minutes. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/college%20board/2022/08/27/csalog2.html",
            "relUrl": "/markdown/college%20board/2022/08/27/csalog2.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Recursion",
            "content": "Bailey Say . Recursion . Recursion is an important technique that can be used to solve certain problems in computer science. For example, what if you wanted to know the Fibonacci number at a certain index? Recursion can help. . How does recursion work? . Recursion occurs when a function calls itself as a part of its executables, meaning that it will be called numerous times when just calling it once. What does this look like? An easy example to show would be a method to find a certain number in the Fibonacci sequence: . public int fibonacciNumber(int termNumber) { . if (termNumber == 1) { . return 0; . } else if (termNumber == 2) { . return 1; . } else { . return this.fibonacciNumber(termNumber - 1) + this.fibonacciNumber(termNumber - 2); . } . } . Essentially, this function will try to find the value of a certain term in the Fibonacci sequence by adding its two previous values. This loops over and over again until reaching the first 2 numbers in the sequence, 0 and 1, which will be returned and make their way back up to the term number inputted by the user. Though this can be quite inefficient at larger amounts, it’s still a good example on how it can be implemented as a solution. .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/25/recursion.html",
            "relUrl": "/2022/08/25/recursion.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Other Data Types",
            "content": "Primitives already went over ints, booleans, doubles, and Strings. These are a few of the other data types: . char: a single character (uses single quotes) | short: a more memory efficient version of int (with a smaller range) | long: a longer version of int, with a much larger range | float: similar to double, but can only hold 7 decimals instead of 15 | . Examples below . char letter = &#39;b&#39;; short shortNumber = 45; long longNumber = 100000; float floatNumber = 5.23f; .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/25/otherdatatypes.html",
            "relUrl": "/2022/08/25/otherdatatypes.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "AP CSA Log 1 - Git Hub",
            "content": "GitHub . GitHub is an online open source service for software development, and it’s one of the main softwares used in AP CSA. Mainly, it serves to control the version history of the many files in a project. . . How does GitHub work? . GitHub organizes projects into repositories, which are the main centers of controlling versions. When changes are made to one of the files, a programmer must make a “push” request (along with a quick message about it), which is basically asking the repository to review the changes and accept it, which is called “committing”. This is pretty useful for larger programs, as it’s important to keep track of all the changes made to a software (in case catastrophic errors occur in a sea of files). Though, on a smaller scale, it’s more tedious. GitHub can be linked to other softwares such as VSCode in order to make changes and push requests directly from there. . Summary . GitHub is pretty useful. 👍 .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/pbl/2022/08/25/csalog1.html",
            "relUrl": "/markdown/pbl/2022/08/25/csalog1.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Primitive Data Types",
            "content": "Example on how to use primitive data types. This particular example takes in Strings, booleans, ints, and doubles to convert certain units from metric to imperial. . import java.util.Scanner; public class Primitives { public static void main(String[] args) { Scanner input; double firstUnit, secondUnit; boolean userConfirm; int userOption; // Takes in String input input = new Scanner(System.in); System.out.println(&quot;Enter your name: &quot;); String name = input.nextLine(); input.close(); System.out.println(&quot;Hello &quot; + name + &quot;!&quot;); System.out.println(&quot;Welcome to the unit convertor!&quot;); // Loop of conversions while (true) { // Takes in boolean input System.out.println(&quot;Would you like to convert something (true/false): &quot;); input = new Scanner(System.in); userConfirm = input.nextBoolean(); input.close(); if (userConfirm) { //Takes in int input System.out.println(&quot;Here are a list of options below:&quot;); System.out.println(&quot; t1. Pounds (lbs) to grams (g)&quot;); System.out.println(&quot; t2. Grams (g) to pounds (lbs)&quot;); System.out.println(&quot; t3. Feet (ft) to meters (m)&quot;); System.out.println(&quot; t4. Meters (m) to feet (ft)&quot;); System.out.println(&quot;What would you like to convert (enter int): &quot;); input = new Scanner(System.in); userOption = input.nextInt(); input.close(); switch (userOption) { // Lbs to grams case 1: System.out.println(&quot;Enter the amount in lbs (double): &quot;); input = new Scanner(System.in); firstUnit = input.nextDouble(); secondUnit = firstUnit * 453.592; System.out.println(firstUnit + &quot; lbs is &quot; + secondUnit + &quot; g.&quot;); input.close(); break; // Grams to lbs case 2: input = new Scanner(System.in); System.out.println(&quot;Enter the amount in g (double): &quot;); firstUnit = input.nextDouble(); secondUnit = firstUnit * 0.00220462; System.out.println(firstUnit + &quot; g is &quot; + secondUnit + &quot; lbs.&quot;); input.close(); break; // Ft to m case 3: input = new Scanner(System.in); System.out.println(&quot;Enter the amount in ft (double): &quot;); firstUnit = input.nextDouble(); secondUnit = firstUnit * 0.3048; System.out.println(firstUnit + &quot; ft is &quot; + secondUnit + &quot; m.&quot;); input.close(); break; // M to ft case 4: input = new Scanner(System.in); System.out.println(&quot;Enter the amount in m (double): &quot;); firstUnit = input.nextDouble(); secondUnit = firstUnit * 3.28084; System.out.println(firstUnit + &quot; m is &quot; + secondUnit + &quot; ft.&quot;); input.close(); break; } } else { break; } } } } Primitives.main(null); . Enter your name: Hello USER! Welcome to the unit convertor! Would you like to convert something (true/false): Here are a list of options below: 1. Pounds (lbs) to grams (g) 2. Grams (g) to pounds (lbs) 3. Feet (ft) to meters (m) 4. Meters (m) to feet (ft) What would you like to convert (enter int): Enter the amount in g (double): 54.0 g is 0.11904948 lbs. Would you like to convert something (true/false): .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/22/primitives.html",
            "relUrl": "/2022/08/22/primitives.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Bash Tutorial",
            "content": "Code below does two things. First, it checks for a directory of a project and creates one if it doesn&#39;t exist. Then, it checks for a repo in the directory and creates one if it doesn&#39;t exist. . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/congenial-tribble # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/horizon-ab/congenial-tribble&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Basic Bash Commands . &quot;ls&quot; =&gt; lists computer files in current directory &quot;cd&quot; =&gt; changes directories &quot;pwd&quot; =&gt; prints current directory &quot;echo&quot; =&gt; displays text/string passed as argument . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . &quot;cat&quot; =&gt; reads data from a file and gives content as output . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . Env, Git, and Github . &quot;env&quot; =&gt; shows setting for shell &quot;git clone&quot; =&gt; sets up director of files &quot;cd $project&quot; =&gt; lets user move inside that directory of files &quot;.git&quot; =&gt; hidden directory; creates relationship between machine and GitHub . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config . Hacks . Updating repository . echo &quot;Use git fetch to check update repositories&quot; # Repository to check export repository=&quot;congenial-tribble&quot; cd $HOME/vscode/$repository git fetch origin git merge origin master . Use git fetch to check update repositories Already up to date. . Tool Checks . Checking that I have certain tools installed on my repository . Checking Python . python3 --version python2 --version . Python 3.10.5 Python 2.7.18 . Checking Jupyter . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3105jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 /Users/baileysay/.vscode/extensions/ms-toolsai.jupyter-2022.4.1021342353/temp/jupyter/kernels/python3105jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 bash /Users/baileysay/Library/Jupyter/kernels/bash java /Users/baileysay/Library/Jupyter/kernels/java javascript /Users/baileysay/Library/Jupyter/kernels/javascript python3 /Users/baileysay/opt/anaconda3/share/jupyter/kernels/python3 . Checking Anaconda . conda list . # packages in environment at /Users/baileysay/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 nbstripout 0.6.0 pypi_0 pypi ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/22/bashtutorial.html",
            "relUrl": "/2022/08/22/bashtutorial.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Python Jupyter Notebook",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/19/hellopython.html",
            "relUrl": "/2022/08/19/hellopython.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Java Jupyter Notebook",
            "content": "System.out.println(&quot;Hello&quot;); . Hello .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2022/08/19/hellojava.html",
            "relUrl": "/2022/08/19/hellojava.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Computer Science A Goals",
            "content": "Computer Science A . Hello . I’m Bailey and this is my first markdown post, so I guess I’ll talk about computer science. . Computer Science . Computer Science is pretty interesting. A lot of things use computers nowadays, so it’d be useful to understand the process behind making the software that is so eminent in our lives. . . Goals . There are a lot of things I want to accomplish this year, including: . Making my first functioning project | Not failing | Experiencing the pain software engineers go through | .",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/2022/08/19/firstpost.html",
            "relUrl": "/markdown/2022/08/19/firstpost.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Fastpages Notebook Blog Post",
            "content": ". toc: true badges: true comments: true categories: [jupyter] . image: images/chart-preview.png . About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://horizon-ab.github.io/congenial-tribble/2020/02/20/test.html",
            "relUrl": "/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post40": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://horizon-ab.github.io/congenial-tribble/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://horizon-ab.github.io/congenial-tribble/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://horizon-ab.github.io/congenial-tribble/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}