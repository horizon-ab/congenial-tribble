<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://horizon-ab.github.io/congenial-tribble/feed.xml" rel="self" type="application/atom+xml" /><link href="https://horizon-ab.github.io/congenial-tribble/" rel="alternate" type="text/html" /><updated>2022-08-23T01:03:03-05:00</updated><id>https://horizon-ab.github.io/congenial-tribble/feed.xml</id><title type="html">fastpages</title><subtitle>An easy to use blogging platform with support for Jupyter Notebooks.</subtitle><entry><title type="html">Primitives</title><link href="https://horizon-ab.github.io/congenial-tribble/2022/08/22/primitives.ipynb" rel="alternate" type="text/html" title="Primitives" /><published>2022-08-22T00:00:00-05:00</published><updated>2022-08-22T00:00:00-05:00</updated><id>https://horizon-ab.github.io/congenial-tribble/2022/08/22/primitives</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "markdown", "metadata": {}, "source": [ "# Primitive Data Types\n", "\n", "Examples on how to use primitive data types" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "java" } }, "outputs": [], "source": [ "public class Primitives {\n", "\n", " public static void main(String[] args) {\n", "\n", " }\n", "}\n", "\n", "Primitives.main(NULL);" ] } ], "metadata": { "language_info": { "name": "python" }, "orig_nbformat": 4 }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry><entry><title type="html">Bashtutorial</title><link href="https://horizon-ab.github.io/congenial-tribble/2022/08/22/bashtutorial.ipynb" rel="alternate" type="text/html" title="Bashtutorial" /><published>2022-08-22T00:00:00-05:00</published><updated>2022-08-22T00:00:00-05:00</updated><id>https://horizon-ab.github.io/congenial-tribble/2022/08/22/bashtutorial</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "markdown", "metadata": {}, "source": [ "# Bash Tutorial\n", "\n", "\"Brief\" overview on how bash works" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "Code below does two things. First, it checks for a directory of a project and creates one if it doesn't exist. Then, it checks for a repo in the directory and creates one if it doesn't exist." ] }, { "cell_type": "code", "execution_count": 6, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Using conditional statement to create a project directory and project\n", "Directory /Users/baileysay/vscode exists.\n", "Directory /Users/baileysay/vscode/congenial-tribble exists.\n" ] } ], "source": [ "echo \"Using conditional statement to create a project directory and project\"\n", "\n", "# Variable section\n", "export project_dir=$HOME/vscode # change vscode to different name to test git clone\n", "export project=$project_dir/congenial-tribble # change APCSP to name of project from git clone\n", "export project_repo=\"https://github.com/horizon-ab/congenial-tribble\" # change to project of choice\n", "\n", "cd ~ # start in home directory\n", "\n", "# Conditional block to make a project directory\n", "if [ ! -d $project_dir ]\n", "then \n", " echo \"Directory $project_dir does not exists... makinng directory $project_dir\"\n", " mkdir -p $project_dir\n", "fi\n", "echo \"Directory $project_dir exists.\" \n", "\n", "# Conditional block to git clone a project from project_repo\n", "if [ ! -d $project ]\n", "then\n", " echo \"Directory $project does not exists... cloning $project_repo\"\n", " cd $project_dir\n", " git clone $project_repo\n", " cd ~\n", "fi\n", "echo \"Directory $project exists.\"" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Basic Bash Commands\n", "\n", "\"ls\" => lists computer files in current directory\n", "\"cd\" => changes directories\n", "\"pwd\" => prints current directory\n", "\"echo\" => displays text/string passed as argument" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "echo \"Navigate to project, then navigate to area wwhere files were cloned\"\n", "cd $project\n", "pwd\n", "\n", "echo \"\"\n", "echo \"list top level or root of files with project pulled from github\"\n", "ls\n", "\n", "echo \"\"\n", "echo \"list again with hidden files pulled from github\"\n", "ls -a # hidden files flag, many shell commands have flags\n", "\n", "echo \"\"\n", "echo \"list all files in long format\"\n", "ls -al # all files and long listing" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "echo \"Look for posts\"\n", "export posts=$project/_posts # _posts inside project\n", "cd $posts # this should exist per fastpages\n", "pwd # present working directory\n", "ls -l # list posts" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "echo \"Look for notebooks\"\n", "export notebooks=$project/_notebooks # _notebooks is inside project\n", "cd $notebooks # this should exist per fastpages\n", "pwd # present working directory\n", "ls -l # list notebooks" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "echo \"Look for images in notebooks, print working directory, list files\"\n", "cd $notebooks/images # this should exist per fastpages\n", "pwd\n", "ls -l" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "\"cat\" => reads data from a file and gives content as output" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "echo \"Navigate to project, then navigate to area wwhere files were cloned\"\n", "\n", "cd $project\n", "echo \"show the contents of README.md\"\n", "echo \"\"\n", "\n", "cat README.md # show contents of file, in this case markdown\n", "echo \"\"\n", "echo \"end of README.md\"" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Env, Git, and Github\n", "\n", "\"env\" => shows setting for shell\n", "\"git clone\" => sets up director of files\n", "\"cd $project\" => lets user move inside that directory of files\n", "\".git\" => hidden directory; creates relationship between machine and GitHub" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "echo \"Show the shell environment variables, key on left of equal value on right\"\n", "echo \"\"\n", "\n", "env" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "cd $project\n", "\n", "echo \"\"\n", "echo \"show the secrets of .git\"\n", "cd .git\n", "ls -l\n", "\n", "echo \"\"\n", "echo \"look at config file\"\n", "cat config\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Hacks\n", "\n", "Updating repository" ] }, { "cell_type": "code", "execution_count": 17, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Use git fetch to check update repositories\n", "Already up to date.\n" ] } ], "source": [ "echo \"Use git fetch to check update repositories\"\n", "\n", "# Repository to check\n", "export repository=\"congenial-tribble\"\n", "\n", "cd $HOME/vscode/$repository\n", "\n", "git fetch origin\n", "git merge origin master\n" ] } ], "metadata": { "interpreter": { "hash": "aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49" }, "kernelspec": { "display_name": "Bash", "language": "bash", "name": "bash" }, "language_info": { "codemirror_mode": "shell", "file_extension": ".sh", "mimetype": "text/x-sh", "name": "bash" }, "orig_nbformat": 4 }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry><entry><title type="html">Java Jupyter Notebook</title><link href="https://horizon-ab.github.io/congenial-tribble/2022/08/19/hellojava.html" rel="alternate" type="text/html" title="Java Jupyter Notebook" /><published>2022-08-19T00:00:00-05:00</published><updated>2022-08-19T00:00:00-05:00</updated><id>https://horizon-ab.github.io/congenial-tribble/2022/08/19/hellojava</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Computer Science A Goals</title><link href="https://horizon-ab.github.io/congenial-tribble/markdown/2022/08/19/firstpost.html" rel="alternate" type="text/html" title="Computer Science A Goals" /><published>2022-08-19T00:00:00-05:00</published><updated>2022-08-19T00:00:00-05:00</updated><id>https://horizon-ab.github.io/congenial-tribble/markdown/2022/08/19/firstpost</id><author><name>Bailey Say</name></author><category term="markdown" /><summary type="html"><![CDATA[Listing my thoughts on AP Comp Sci A and my goals]]></summary></entry><entry><title type="html">Python Jupyter Notebook</title><link href="https://horizon-ab.github.io/congenial-tribble/2022/08/19/hellopython.html" rel="alternate" type="text/html" title="Python Jupyter Notebook" /><published>2022-08-19T00:00:00-05:00</published><updated>2022-08-19T00:00:00-05:00</updated><id>https://horizon-ab.github.io/congenial-tribble/2022/08/19/hellopython</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry></feed>