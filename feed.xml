<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://horizon-ab.github.io/congenial-tribble/feed.xml" rel="self" type="application/atom+xml" /><link href="https://horizon-ab.github.io/congenial-tribble/" rel="alternate" type="text/html" /><updated>2022-11-30T13:43:29-06:00</updated><id>https://horizon-ab.github.io/congenial-tribble/feed.xml</id><title type="html">fastpages</title><subtitle>An easy to use blogging platform with support for Jupyter Notebooks.</subtitle><entry><title type="html">Unit7arraylists</title><link href="https://horizon-ab.github.io/congenial-tribble/2022/11/30/unit7arraylists.ipynb" rel="alternate" type="text/html" title="Unit7arraylists" /><published>2022-11-30T00:00:00-06:00</published><updated>2022-11-30T00:00:00-06:00</updated><id>https://horizon-ab.github.io/congenial-tribble/2022/11/30/unit7arraylists</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "markdown", "metadata": {}, "source": [ "# Array List Lesson\n", "\n", "- toc: false\n", "- badges: true\n", "- comments: true\n", "- author: Calissa\n", "- categories: [java, labs]\n", "- image: images/arrayList.jpeg\n", "\n", "java notebook" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "### Lesson Purpose and Objectives\n", "\n", "Learn about the structure and functions of an arrayList and go over the key College Board concepts for arrayLists\n", "\n", "ArrayLists are only 2.5%-7.5% but have many concepts from other units and are a good data structure to know. Also, the 3rd question of the FRQ is based on ArrayLists\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "### 7.1 Introduction to ArrayList\n", "\n", "| Arrays | ArrayLists |\n", "| ----- | ---------- |\n", "| Static (fixed size) | Dynamic (can change size) | \n", "| Fundamental java feature | Part of a framework. Someone was nice and designed this with the behind the scenes being arrays |\n", "| An object with no methods | A class with many methods |\n", "| Not as flexible | Designed to be more flexible |\n", "| Can store more primitive data | Not designed to store primitives, they store object references| \n", "| | Slightly slower than Arrays |\n", "| | Can only be used with an import statement |\n", "\n", "Real Life Array Example:\n", "You always have to have five players on the court\n", "\n", "Real Life ArrayList Example:\n", "In dodgeball, the number of people in the game is changing based on who comes in or gets out\n", "\n", "Primitive Data Types:\n", "- boolean \n", "- char\n", "- double\n", "- int\n", "\n", "Wrapper Class Data Types\n", "(Store the primitive values as objects)\n", "- Boolean\n", "- Character\n", "- Double\n", "- Integer" ] }, { "cell_type": "code", "execution_count": 1, "metadata": {}, "outputs": [], "source": [ "import java.util.ArrayList; //you must import the java.util package\n", "\n", "// Instantiating: ArrayList variableName = new ArrayList(n);\n", "//DataType must be nonprimitive data type\n", "\n", "public class introArrayList {\n", " public static void main (String[] args) {\n", " ArrayList e1 = new ArrayList(); //empty\n", " ArrayList e2 = new ArrayList(5); //5 elements\n", " ArrayList e3 = new ArrayList(); //you can store whatever objects you want\n", " }\n", "}" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "### 7.2 ArrayList Methods\n", "\n", "There are a lot of cool methods that you can use with arrayLists, but here are the ones College Board wants you to know for 7.2:\n", "\n", "size();\n", "- Returns the number of elements in the list\n", "\n", "add(obj);\n", "- Adds element at the end\n", "\n", "add(index, object);\n", "- Adds element at specific index\n", "\n", "remove(index);\n", "- Removes element from specific index\n", "\n", "set(index, object);\n", "- Replaces element at index with new object\n", "\n", "get(index);\n", "- Returns element at index\n" ] }, { "cell_type": "code", "execution_count": 17, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "There are 3 in the ArrayList\n", "There are 3 in the ArrayList\n", "There are now 4 dogs in the ArrayList\n", "My dog is named Noodle\n" ] } ], "source": [ "import java.util.ArrayList; \n", "\n", "public class methodsArrayList {\n", " public static void main (String[] args) {\n", " ArrayList dogs = new ArrayList(Arrays.asList(\"Sparky\", \"Duke\", \"Noodle\"));\n", " ArrayList dogs2 = new ArrayList(Arrays.asList(\"Sparky\", \"Duke\", \"Noodle\"));\n", " System.out.println(\"There are \" + dogs.size() + \" in the ArrayList\"); \n", " System.out.println(\"There are \" + dogs2.size() + \" in the ArrayList\");\n", " \n", " //objects you add must be of the same data type\n", " dogs.add(\"Peanut\");\n", " System.out.println(\"There are now \" + dogs.size() + \" dogs in the ArrayList\"); \n", "\n", " String myDog = dogs.get(2);\n", " System.out.println(\"My dog is named \" + myDog);\n", " }\n", "}\n", "\n", "//Note: you don't need to declare again after new ArrayList\n", "\n", "methodsArrayList.main(null);" ] }, { "cell_type": "code", "execution_count": 23, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Hello\n" ] } ], "source": [ "//Hmmmm... seems suspect\n", "\n", "import java.util.ArrayList; \n", "\n", "public class example {\n", " public static void main (String[] args) {\n", " ArrayList questions = new ArrayList();\n", " questions.add(true);\n", " questions.add(false);\n", " myMethod(questions);\n", " }\n", " public static void myMethod(ArrayList arr)\n", " {\n", " if (arr.size()>0)\n", " {\n", " arr.set(0,\"Hello\"); //String with boolean??? Uh oh!\n", " System.out.println(arr.get(0));\n", "\n", " }\n", " }\n", "}\n", "\n", "example.main(null);" ] }, { "cell_type": "code", "execution_count": 24, "metadata": {}, "outputs": [ { "ename": "CompilationException", "evalue": "", "output_type": "error", "traceback": [ "\u001b[1m\u001b[30m| \u001b[1m\u001b[30m arr.set(0,\u001b[0m\u001b[1m\u001b[30m\u001b[41m\"Hello\"\u001b[0m\u001b[1m\u001b[30m); //String with boolean??? Uh oh!\u001b[0m", "\u001b[1m\u001b[31mincompatible types: java.lang.String cannot be converted to java.lang.Boolean\u001b[0m", "" ] } ], "source": [ "import java.util.ArrayList; \n", "\n", "public class example {\n", " public static void main (String[] args) {\n", " ArrayList questions = new ArrayList();\n", " questions.add(true);\n", " questions.add(false);\n", " myMethod(questions);\n", " }\n", " public static void myMethod(ArrayList arr)\n", " {\n", " if (arr.size()>0)\n", " {\n", " arr.set(0,\"Hello\"); //String with boolean??? Uh oh!\n", " System.out.println(arr.get(0));\n", "\n", " }\n", " }\n", "}\n", "\n", "example.main(null);\n", "\n", "//Make sure to specify data type so the compiler is more helpful and it avoids confusion\n", "//This also applies for returning and arrayList as well" ] }, { "cell_type": "code", "execution_count": 25, "metadata": {}, "outputs": [], "source": [ "//Returning an ArrayList\n", "\n", "public static ArrayList methodName (ArrayList arr){\n", " return arr;\n", "}" ] }, { "cell_type": "code", "execution_count": 2, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "2\n", "4\n", "6\n" ] } ], "source": [ "// HACK!!!!\n", "// Create an arrayList and use one of the cool methods for it\n", "\n", "import java.util.ArrayList; \n", "\n", "public class hack1 {\n", " public static void main (String[] args) {\n", " ArrayList numbers = new ArrayList();\n", " numbers.add(1);\n", " numbers.add(2);\n", " numbers.add(3);\n", " for (int number : numbers) {\n", " System.out.println(number * 2);\n", " }\n", " }\n", "}\n", "\n", "hack1.main(null);" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "### 7.3 Traversing ArrayLists" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "- there are 2 ways to traverse arraylists: for loops and enhanced for loops\n", "- use get() instead of bracket notation for getting an element of an arraylist\n", "- use size() to find number of elements in arraylist instead of using .length " ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "### for loop " ] }, { "cell_type": "code", "execution_count": 2, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "1 2 3 4 5 " ] } ], "source": [ "import java.util.*;\n", " \n", "public class main {\n", " \n", " public static void main(String[] args) {\n", " \n", " List numbers = Arrays.asList(1, 2, 3, 4, 5);\n", " \n", " for (int i = 0; i numbers = Arrays.asList(1, 2, 3, 4, 5);\n", " \n", " for ( int num : numbers ) \n", " System.out.print(num + \" \"); \n", " }\n", "}\n", " \n", "main.main(null);" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "### Common Mistakes" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "- don't forget to import java.util.ArrayList\n", "- don't declare or instantiate ArrayList with a primitive data type, which are things such as int, double, and booleans. \n", "- don't forget the parentheses at the end of the constructor and the element types with the brackets: ArrayList list = new ArrayList(); \n", "- don't confuse arrays with arraylists, don't use [], don't use .length use .size() instead \n", "\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "### Hack #2" ] }, { "cell_type": "code", "execution_count": 12, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "[green box, blue water]\n" ] } ], "source": [ "import java.util.ArrayList;\n", "\n", "ArrayList color = new ArrayList(); \n", "color.add(\"red apple\");\n", "color.add(\"green box\");\n", "color.add(\"blue water\");\n", "color.add(\"red panda\");\n", "\n", "\n", "/*/ \n", "using \n", "\n", "if(color.get(i).contains(\"red\"))\n", "\n", "iterate through the arraylist and remove all elements that contain the word red in them\n", "/*/\n", "\n", "for (int i = 0; i num = new ArrayList(); \n", "\n", "num.add(5);\n", "num.add(1);\n", "num.add(3);\n", "\n", "for (int i = 0; i num = new ArrayList(); \n", "\n", "num.add(5);\n", "num.add(1);\n", "num.add(3);\n", "\n", "int maxValue = num.get(0);\n", "for (int number: num) {\n", " if (number > maxValue) { \n", " maxValue = number;\n", " }\n", "}\n", "\n", "System.out.print(maxValue);" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "### find min value" ] }, { "cell_type": "code", "execution_count": 42, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "1" ] } ], "source": [ "ArrayList num = new ArrayList(); \n", "\n", "num.add(5);\n", "num.add(1);\n", "num.add(3);\n", "\n", "int minValue = num.get(0);\n", "for (int number: num) {\n", " if (number num = new ArrayList(); \n", "\n", "num.add(5);\n", "num.add(1);\n", "num.add(3);\n", "\n", "int sum = 0;\n", "\n", "for (int number : num) {\n", " sum += number;\n", "}\n", "\n", "System.out.println(sum);\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "### 7.5 Searching" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "- Often times we need to locate data inside linear structures.\n", "Normally we would use for loops in order to specify each element, one at a time, and do not need to track the index after execution." ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "for ( int index = 0; index myBooks)\n", " {\n", " for (int index = 0; index = 0 && tested.compareTo(randomList.get(inner)) userList = new ArrayList(Arrays.asList(\"Kian\", \"Kiannp44@gmail.com\", \"Samuel\", \"samuelwaang@gmail.com\", \"Calissa\", \"calissaT@gmail.com\"));\n", "\n", " // takes user's name\n", " System.out.println(\"Log in ---\");\n", " System.out.println(\"Please enter your name:\");\n", " String name = sc.nextLine();\n", " System.out.println(name);\n", " userList.add(name);\n", "\n", " // takes user's email\n", " System.out.println(\"Please enter your email:\");\n", " String email = sc.nextLine();\n", " System.out.println(email);\n", " userList.add(email);\n", "\n", " // prints all the current users in arraylist\n", " System.out.println();\n", " System.out.println(\"Current users in databse ---\");\n", " System.out.println(userList);\n", "\n", " // prompt to log out\n", " System.out.println();\n", " System.out.println(\"Would you like to log out? (y/n)\");\n", " String logOut = sc.nextLine();\n", " if (logOut.equals(\"y\")) { // if user logs out, remove their name and email from arraylist\n", " System.out.println(logOut);\n", " userList.remove(name);\n", " userList.remove(email);\n", "\n", " }\n", "\n", " // reprints current users in arraylist\n", " System.out.println();\n", " System.out.println(\"Current users in database ---\");\n", " System.out.println(userList);\n", " }\n", "}\n", "\n", "dataRemoval.main(null);" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "#### Anonymizing Personal Data\n", "\n", "Instead of using names for users, we can use hash codes instead, which means that each user will simply be identified by their hash code." ] }, { "cell_type": "code", "execution_count": 50, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Hash Code: 2172094\n" ] } ], "source": [ "public class hashUsers {\n", "\n", " public static void main(String[] args) {\n", "\n", " Scanner sc = new Scanner(System.in);\n", "\n", " String name = sc.nextLine();\n", "\n", " // this .hashCode() method will convert the name to a code which cannot be traced back to that original name\n", " int id = name.hashCode();\n", " \n", " name = null; // name is now null, and nobody will ever know the original name I put in\n", "\n", " System.out.println(\"Hash Code: \" + id);\n", " }\n", "}\n", "\n", "hashUsers.main(null);" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "#### The Takeaway\n", "\n", "It is important to understand that as a programmer handling user data, it is your responsibility to protect that collected data. The less data you collect, the less you have to safeguard. A compromised database will generally be an expensive lawsuit in a large scale project." ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "### Homework\n", "\n", "[Quizizz](https://quizizz.com/join?gc=63805835)\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "![Results](../images/unit7quizzizz.png)" ] } ], "metadata": { "kernelspec": { "display_name": "Java", "language": "java", "name": "java" }, "language_info": { "codemirror_mode": "java", "file_extension": ".jshell", "mimetype": "text/x-java-source", "name": "java", "pygments_lexer": "java", "version": "17.0.4+8" }, "orig_nbformat": 4 }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry><entry><title type="html">The Euclidean Algorithm</title><link href="https://horizon-ab.github.io/congenial-tribble/personal/2022/11/10/euclideanalgorithm.html" rel="alternate" type="text/html" title="The Euclidean Algorithm" /><published>2022-11-10T00:00:00-06:00</published><updated>2022-11-10T00:00:00-06:00</updated><id>https://horizon-ab.github.io/congenial-tribble/personal/2022/11/10/euclideanalgorithm</id><author><name></name></author><category term="personal" /><summary type="html"><![CDATA[The Euclidean Algorithm is a method used to quickly determine the GCD of two integers A and B]]></summary></entry><entry><title type="html">Trimester 1 Notes (Units 1-6)</title><link href="https://horizon-ab.github.io/congenial-tribble/markdown/college%20board/2022/11/08/trimester1notes.html" rel="alternate" type="text/html" title="Trimester 1 Notes (Units 1-6)" /><published>2022-11-08T00:00:00-06:00</published><updated>2022-11-08T00:00:00-06:00</updated><id>https://horizon-ab.github.io/congenial-tribble/markdown/college%20board/2022/11/08/trimester1notes</id><author><name>Bailey Say</name></author><category term="markdown" /><category term="college board" /><summary type="html"><![CDATA[Notes on all of the units covered so far]]></summary></entry><entry><title type="html">Test Corrections</title><link href="https://horizon-ab.github.io/congenial-tribble/markdown/college%20board/2022/11/07/testcorrections.html" rel="alternate" type="text/html" title="Test Corrections" /><published>2022-11-07T00:00:00-06:00</published><updated>2022-11-07T00:00:00-06:00</updated><id>https://horizon-ab.github.io/congenial-tribble/markdown/college%20board/2022/11/07/testcorrections</id><author><name>Bailey Say</name></author><category term="markdown" /><category term="college board" /><summary type="html"><![CDATA[Correcting AP Collegeboard Problems]]></summary></entry><entry><title type="html">Array Lesson - Team 5</title><link href="https://horizon-ab.github.io/congenial-tribble/jupyter/2022/10/25/unit6arrays.html" rel="alternate" type="text/html" title="Array Lesson - Team 5" /><published>2022-10-25T00:00:00-05:00</published><updated>2022-10-25T00:00:00-05:00</updated><id>https://horizon-ab.github.io/congenial-tribble/jupyter/2022/10/25/unit6arrays</id><author><name></name></author><category term="jupyter" /><summary type="html"><![CDATA[a lesson about arrays made by Team 5]]></summary></entry></feed>